{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/message-type-contract.js"],"sourcesContent":["/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol.for(\"protobuf-ts/message-type\");\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACM,MAAM,eAAe,OAAO,GAAG,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/lower-camel-case.js"],"sourcesContent":["/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n    let capNext = false;\n    const sb = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let next = snakeCase.charAt(i);\n        if (next == '_') {\n            capNext = true;\n        }\n        else if (/\\d/.test(next)) {\n            sb.push(next);\n            capNext = true;\n        }\n        else if (capNext) {\n            sb.push(next.toUpperCase());\n            capNext = false;\n        }\n        else if (i == 0) {\n            sb.push(next.toLowerCase());\n        }\n        else {\n            sb.push(next);\n        }\n    }\n    return sb.join('');\n}\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACM,SAAS,eAAe,SAAS;IACpC,IAAI,UAAU;IACd,MAAM,KAAK,EAAE;IACb,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;QACvC,IAAI,OAAO,UAAU,MAAM,CAAC;QAC5B,IAAI,QAAQ,KAAK;YACb,UAAU;QACd,OACK,IAAI,KAAK,IAAI,CAAC,OAAO;YACtB,GAAG,IAAI,CAAC;YACR,UAAU;QACd,OACK,IAAI,SAAS;YACd,GAAG,IAAI,CAAC,KAAK,WAAW;YACxB,UAAU;QACd,OACK,IAAI,KAAK,GAAG;YACb,GAAG,IAAI,CAAC,KAAK,WAAW;QAC5B,OACK;YACD,GAAG,IAAI,CAAC;QACZ;IACJ;IACA,OAAO,GAAG,IAAI,CAAC;AACnB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-info.js"],"sourcesContent":["import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript `bigint`.\n     *\n     * Field option `[jstype = JS_NORMAL]`.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript `string`.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n    /**\n     * Use JavaScript `number`.\n     *\n     * Large values will loose precision.\n     *\n     * Field option `[jstype = JS_NUMBER]`.\n     */\n    LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n    /**\n     * The field is not repeated.\n     */\n    RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n    /**\n     * The field is repeated and should be packed.\n     * Invalid for `bytes` and `string`, they cannot be packed.\n     */\n    RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * The field is repeated but should not be packed.\n     * The only valid repeat type for repeated `bytes` and `string`.\n     */\n    RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n    var _a, _b, _c, _d;\n    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n    field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == \"message\");\n    return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n    const options = messageType.options;\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/oneof.js"],"sourcesContent":["/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n        return false;\n    }\n    switch (typeof any.oneofKind) {\n        case \"string\":\n            if (any[any.oneofKind] === undefined)\n                return false;\n            return Object.keys(any).length == 2;\n        case \"undefined\":\n            return Object.keys(any).length == 1;\n        default:\n            return false;\n    }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n    return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined) {\n        oneof[kind] = value;\n    }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined && kind !== undefined) {\n        oneof[kind] = value;\n    }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n    if (oneof.oneofKind === undefined) {\n        return undefined;\n    }\n    return oneof[oneof.oneofKind];\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BC;;;;;;;;AACM,SAAS,aAAa,GAAG;IAC5B,IAAI,OAAO,OAAO,YAAY,QAAQ,QAAQ,CAAC,IAAI,cAAc,CAAC,cAAc;QAC5E,OAAO;IACX;IACA,OAAQ,OAAO,IAAI,SAAS;QACxB,KAAK;YACD,IAAI,GAAG,CAAC,IAAI,SAAS,CAAC,KAAK,WACvB,OAAO;YACX,OAAO,OAAO,IAAI,CAAC,KAAK,MAAM,IAAI;QACtC,KAAK;YACD,OAAO,OAAO,IAAI,CAAC,KAAK,MAAM,IAAI;QACtC;YACI,OAAO;IACf;AACJ;AAIO,SAAS,cAAc,KAAK,EAAE,IAAI;IACrC,OAAO,KAAK,CAAC,KAAK;AACtB;AACO,SAAS,cAAc,KAAK,EAAE,IAAI,EAAE,KAAK;IAC5C,IAAI,MAAM,SAAS,KAAK,WAAW;QAC/B,OAAO,KAAK,CAAC,MAAM,SAAS,CAAC;IACjC;IACA,MAAM,SAAS,GAAG;IAClB,IAAI,UAAU,WAAW;QACrB,KAAK,CAAC,KAAK,GAAG;IAClB;AACJ;AACO,SAAS,qBAAqB,KAAK,EAAE,IAAI,EAAE,KAAK;IACnD,IAAI,MAAM,SAAS,KAAK,WAAW;QAC/B,OAAO,KAAK,CAAC,MAAM,SAAS,CAAC;IACjC;IACA,MAAM,SAAS,GAAG;IAClB,IAAI,UAAU,aAAa,SAAS,WAAW;QAC3C,KAAK,CAAC,KAAK,GAAG;IAClB;AACJ;AAWO,SAAS,gBAAgB,KAAK;IACjC,IAAI,MAAM,SAAS,KAAK,WAAW;QAC/B,OAAO,KAAK,CAAC,MAAM,SAAS,CAAC;IACjC;IACA,MAAM,SAAS,GAAG;AACtB;AAkBO,SAAS,sBAAsB,KAAK;IACvC,IAAI,MAAM,SAAS,KAAK,WAAW;QAC/B,OAAO;IACX;IACA,OAAO,KAAK,CAAC,MAAM,SAAS,CAAC;AACjC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-type-check.js"],"sourcesContent":["import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    prepare() {\n        if (this.data)\n            return;\n        const req = [], known = [], oneofs = [];\n        for (let field of this.fields) {\n            if (field.oneof) {\n                if (!oneofs.includes(field.oneof)) {\n                    oneofs.push(field.oneof);\n                    req.push(field.oneof);\n                    known.push(field.oneof);\n                }\n            }\n            else {\n                known.push(field.localName);\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        if (!field.opt || field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"message\":\n                        if (field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"map\":\n                        req.push(field.localName);\n                        break;\n                }\n            }\n        }\n        this.data = { req, known, oneofs: Object.values(oneofs) };\n    }\n    /**\n     * Is the argument a valid message as specified by the\n     * reflection information?\n     *\n     * Checks all field types recursively. The `depth`\n     * specifies how deep into the structure the check will be.\n     *\n     * With a depth of 0, only the presence of fields\n     * is checked.\n     *\n     * With a depth of 1 or more, the field types are checked.\n     *\n     * With a depth of 2 or more, the members of map, repeated\n     * and message fields are checked.\n     *\n     * Message fields will be checked recursively with depth - 1.\n     *\n     * The number of map entries / repeated values being checked\n     * is < depth.\n     */\n    is(message, depth, allowExcessProperties = false) {\n        if (depth < 0)\n            return true;\n        if (message === null || message === undefined || typeof message != 'object')\n            return false;\n        this.prepare();\n        let keys = Object.keys(message), data = this.data;\n        // if a required field is missing in arg, this cannot be a T\n        if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))\n            return false;\n        if (!allowExcessProperties) {\n            // if the arg contains a key we dont know, this is not a literal T\n            if (keys.some(k => !data.known.includes(k)))\n                return false;\n        }\n        // \"With a depth of 0, only the presence and absence of fields is checked.\"\n        // \"With a depth of 1 or more, the field types are checked.\"\n        if (depth < 1) {\n            return true;\n        }\n        // check oneof group\n        for (const name of data.oneofs) {\n            const group = message[name];\n            if (!isOneofGroup(group))\n                return false;\n            if (group.oneofKind === undefined)\n                continue;\n            const field = this.fields.find(f => f.localName === group.oneofKind);\n            if (!field)\n                return false; // we found no field, but have a kind, something is wrong\n            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))\n                return false;\n        }\n        // check types\n        for (const field of this.fields) {\n            if (field.oneof !== undefined)\n                continue;\n            if (!this.field(message[field.localName], field, allowExcessProperties, depth))\n                return false;\n        }\n        return true;\n    }\n    field(arg, field, allowExcessProperties, depth) {\n        let repeated = field.repeat;\n        switch (field.kind) {\n            case \"scalar\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, field.T, depth, field.L);\n                return this.scalar(arg, field.T, field.L);\n            case \"enum\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, ScalarType.INT32, depth);\n                return this.scalar(arg, ScalarType.INT32);\n            case \"message\":\n                if (arg === undefined)\n                    return true;\n                if (repeated)\n                    return this.messages(arg, field.T(), allowExcessProperties, depth);\n                return this.message(arg, field.T(), allowExcessProperties, depth);\n            case \"map\":\n                if (typeof arg != 'object' || arg === null)\n                    return false;\n                if (depth < 2)\n                    return true;\n                if (!this.mapKeys(arg, field.K, depth))\n                    return false;\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n                    case \"enum\":\n                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n                    case \"message\":\n                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n                }\n                break;\n        }\n        return true;\n    }\n    message(arg, type, allowExcessProperties, depth) {\n        if (allowExcessProperties) {\n            return type.isAssignable(arg, depth);\n        }\n        return type.is(arg, depth);\n    }\n    messages(arg, type, allowExcessProperties, depth) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (allowExcessProperties) {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.isAssignable(arg[i], depth - 1))\n                    return false;\n        }\n        else {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.is(arg[i], depth - 1))\n                    return false;\n        }\n        return true;\n    }\n    scalar(arg, type, longType) {\n        let argType = typeof arg;\n        switch (type) {\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                switch (longType) {\n                    case LongType.BIGINT:\n                        return argType == \"bigint\";\n                    case LongType.NUMBER:\n                        return argType == \"number\" && !isNaN(arg);\n                    default:\n                        return argType == \"string\";\n                }\n            case ScalarType.BOOL:\n                return argType == 'boolean';\n            case ScalarType.STRING:\n                return argType == 'string';\n            case ScalarType.BYTES:\n                return arg instanceof Uint8Array;\n            case ScalarType.DOUBLE:\n            case ScalarType.FLOAT:\n                return argType == 'number' && !isNaN(arg);\n            default:\n                // case ScalarType.UINT32:\n                // case ScalarType.FIXED32:\n                // case ScalarType.INT32:\n                // case ScalarType.SINT32:\n                // case ScalarType.SFIXED32:\n                return argType == 'number' && Number.isInteger(arg);\n        }\n    }\n    scalars(arg, type, depth, longType) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (Array.isArray(arg))\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!this.scalar(arg[i], type, longType))\n                    return false;\n        return true;\n    }\n    mapKeys(map, type, depth) {\n        let keys = Object.keys(map);\n        switch (type) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n            case ScalarType.UINT32:\n                return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n            case ScalarType.BOOL:\n                return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n            default:\n                return this.scalars(keys, type, depth, LongType.STRING);\n        }\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM;IACT,YAAY,IAAI,CAAE;QACd,IAAI;QACJ,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,KAAK,MAAM,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,EAAE;IACxE;IACA,UAAU;QACN,IAAI,IAAI,CAAC,IAAI,EACT;QACJ,MAAM,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,SAAS,EAAE;QACvC,KAAK,IAAI,SAAS,IAAI,CAAC,MAAM,CAAE;YAC3B,IAAI,MAAM,KAAK,EAAE;gBACb,IAAI,CAAC,OAAO,QAAQ,CAAC,MAAM,KAAK,GAAG;oBAC/B,OAAO,IAAI,CAAC,MAAM,KAAK;oBACvB,IAAI,IAAI,CAAC,MAAM,KAAK;oBACpB,MAAM,IAAI,CAAC,MAAM,KAAK;gBAC1B;YACJ,OACK;gBACD,MAAM,IAAI,CAAC,MAAM,SAAS;gBAC1B,OAAQ,MAAM,IAAI;oBACd,KAAK;oBACL,KAAK;wBACD,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,MAAM,EAC1B,IAAI,IAAI,CAAC,MAAM,SAAS;wBAC5B;oBACJ,KAAK;wBACD,IAAI,MAAM,MAAM,EACZ,IAAI,IAAI,CAAC,MAAM,SAAS;wBAC5B;oBACJ,KAAK;wBACD,IAAI,IAAI,CAAC,MAAM,SAAS;wBACxB;gBACR;YACJ;QACJ;QACA,IAAI,CAAC,IAAI,GAAG;YAAE;YAAK;YAAO,QAAQ,OAAO,MAAM,CAAC;QAAQ;IAC5D;IACA;;;;;;;;;;;;;;;;;;;KAmBC,GACD,GAAG,OAAO,EAAE,KAAK,EAAE,wBAAwB,KAAK,EAAE;QAC9C,IAAI,QAAQ,GACR,OAAO;QACX,IAAI,YAAY,QAAQ,YAAY,aAAa,OAAO,WAAW,UAC/D,OAAO;QACX,IAAI,CAAC,OAAO;QACZ,IAAI,OAAO,OAAO,IAAI,CAAC,UAAU,OAAO,IAAI,CAAC,IAAI;QACjD,4DAA4D;QAC5D,IAAI,KAAK,MAAM,GAAG,KAAK,GAAG,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,CAAA,IAAK,CAAC,KAAK,QAAQ,CAAC,KACnE,OAAO;QACX,IAAI,CAAC,uBAAuB;YACxB,kEAAkE;YAClE,IAAI,KAAK,IAAI,CAAC,CAAA,IAAK,CAAC,KAAK,KAAK,CAAC,QAAQ,CAAC,KACpC,OAAO;QACf;QACA,2EAA2E;QAC3E,4DAA4D;QAC5D,IAAI,QAAQ,GAAG;YACX,OAAO;QACX;QACA,oBAAoB;QACpB,KAAK,MAAM,QAAQ,KAAK,MAAM,CAAE;YAC5B,MAAM,QAAQ,OAAO,CAAC,KAAK;YAC3B,IAAI,CAAC,CAAA,GAAA,uKAAA,CAAA,eAAY,AAAD,EAAE,QACd,OAAO;YACX,IAAI,MAAM,SAAS,KAAK,WACpB;YACJ,MAAM,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,SAAS,KAAK,MAAM,SAAS;YACnE,IAAI,CAAC,OACD,OAAO,OAAO,yDAAyD;YAC3E,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,SAAS,CAAC,EAAE,OAAO,uBAAuB,QAClE,OAAO;QACf;QACA,cAAc;QACd,KAAK,MAAM,SAAS,IAAI,CAAC,MAAM,CAAE;YAC7B,IAAI,MAAM,KAAK,KAAK,WAChB;YACJ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,SAAS,CAAC,EAAE,OAAO,uBAAuB,QACpE,OAAO;QACf;QACA,OAAO;IACX;IACA,MAAM,GAAG,EAAE,KAAK,EAAE,qBAAqB,EAAE,KAAK,EAAE;QAC5C,IAAI,WAAW,MAAM,MAAM;QAC3B,OAAQ,MAAM,IAAI;YACd,KAAK;gBACD,IAAI,QAAQ,WACR,OAAO,MAAM,GAAG;gBACpB,IAAI,UACA,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,MAAM,CAAC,EAAE,OAAO,MAAM,CAAC;gBACpD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,MAAM,CAAC,EAAE,MAAM,CAAC;YAC5C,KAAK;gBACD,IAAI,QAAQ,WACR,OAAO,MAAM,GAAG;gBACpB,IAAI,UACA,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK,EAAE;gBAC/C,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK;YAC5C,KAAK;gBACD,IAAI,QAAQ,WACR,OAAO;gBACX,IAAI,UACA,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,MAAM,CAAC,IAAI,uBAAuB;gBAChE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,MAAM,CAAC,IAAI,uBAAuB;YAC/D,KAAK;gBACD,IAAI,OAAO,OAAO,YAAY,QAAQ,MAClC,OAAO;gBACX,IAAI,QAAQ,GACR,OAAO;gBACX,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,MAAM,CAAC,EAAE,QAC5B,OAAO;gBACX,OAAQ,MAAM,CAAC,CAAC,IAAI;oBAChB,KAAK;wBACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,MAAM,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,MAAM,CAAC,CAAC,CAAC;oBACvE,KAAK;wBACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,MAAM,CAAC,MAAM,oLAAA,CAAA,aAAU,CAAC,KAAK,EAAE;oBAC9D,KAAK;wBACD,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,MAAM,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,IAAI,uBAAuB;gBACrF;gBACA;QACR;QACA,OAAO;IACX;IACA,QAAQ,GAAG,EAAE,IAAI,EAAE,qBAAqB,EAAE,KAAK,EAAE;QAC7C,IAAI,uBAAuB;YACvB,OAAO,KAAK,YAAY,CAAC,KAAK;QAClC;QACA,OAAO,KAAK,EAAE,CAAC,KAAK;IACxB;IACA,SAAS,GAAG,EAAE,IAAI,EAAE,qBAAqB,EAAE,KAAK,EAAE;QAC9C,IAAI,CAAC,MAAM,OAAO,CAAC,MACf,OAAO;QACX,IAAI,QAAQ,GACR,OAAO;QACX,IAAI,uBAAuB;YACvB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,IAAI,IAAI,OAAO,IACzC,IAAI,CAAC,KAAK,YAAY,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,IACnC,OAAO;QACnB,OACK;YACD,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,IAAI,IAAI,OAAO,IACzC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,IACzB,OAAO;QACnB;QACA,OAAO;IACX;IACA,OAAO,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;QACxB,IAAI,UAAU,OAAO;QACrB,OAAQ;YACJ,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;YACtB,KAAK,oLAAA,CAAA,aAAU,CAAC,OAAO;YACvB,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK;YACrB,KAAK,oLAAA,CAAA,aAAU,CAAC,QAAQ;YACxB,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;gBAClB,OAAQ;oBACJ,KAAK,oLAAA,CAAA,WAAQ,CAAC,MAAM;wBAChB,OAAO,WAAW;oBACtB,KAAK,oLAAA,CAAA,WAAQ,CAAC,MAAM;wBAChB,OAAO,WAAW,YAAY,CAAC,MAAM;oBACzC;wBACI,OAAO,WAAW;gBAC1B;YACJ,KAAK,oLAAA,CAAA,aAAU,CAAC,IAAI;gBAChB,OAAO,WAAW;YACtB,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;gBAClB,OAAO,WAAW;YACtB,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK;gBACjB,OAAO,eAAe;YAC1B,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;YACtB,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK;gBACjB,OAAO,WAAW,YAAY,CAAC,MAAM;YACzC;gBACI,0BAA0B;gBAC1B,2BAA2B;gBAC3B,yBAAyB;gBACzB,0BAA0B;gBAC1B,4BAA4B;gBAC5B,OAAO,WAAW,YAAY,OAAO,SAAS,CAAC;QACvD;IACJ;IACA,QAAQ,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;QAChC,IAAI,CAAC,MAAM,OAAO,CAAC,MACf,OAAO;QACX,IAAI,QAAQ,GACR,OAAO;QACX,IAAI,MAAM,OAAO,CAAC,MACd;YAAA,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,IAAI,IAAI,OAAO,IACzC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,WAC3B,OAAO;QAAK;QACxB,OAAO;IACX;IACA,QAAQ,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE;QACtB,IAAI,OAAO,OAAO,IAAI,CAAC;QACvB,OAAQ;YACJ,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK;YACrB,KAAK,oLAAA,CAAA,aAAU,CAAC,OAAO;YACvB,KAAK,oLAAA,CAAA,aAAU,CAAC,QAAQ;YACxB,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;YACtB,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;gBAClB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,CAAC,GAAG,OAAO,GAAG,CAAC,CAAA,IAAK,SAAS,KAAK,MAAM;YAC1E,KAAK,oLAAA,CAAA,aAAU,CAAC,IAAI;gBAChB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,CAAC,GAAG,OAAO,GAAG,CAAC,CAAA,IAAK,KAAK,SAAS,OAAO,KAAK,UAAU,QAAQ,IAAI,MAAM;YAC5G;gBACI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,MAAM,OAAO,oLAAA,CAAA,WAAQ,CAAC,MAAM;QAC9D;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 466, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/json-typings.js"],"sourcesContent":["/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n    let t = typeof value;\n    if (t == \"object\") {\n        if (Array.isArray(value))\n            return \"array\";\n        if (value === null)\n            return \"null\";\n    }\n    return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n    return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;AACM,SAAS,gBAAgB,KAAK;IACjC,IAAI,IAAI,OAAO;IACf,IAAI,KAAK,UAAU;QACf,IAAI,MAAM,OAAO,CAAC,QACd,OAAO;QACX,IAAI,UAAU,MACV,OAAO;IACf;IACA,OAAO;AACX;AAIO,SAAS,aAAa,KAAK;IAC9B,OAAO,UAAU,QAAQ,OAAO,SAAS,YAAY,CAAC,MAAM,OAAO,CAAC;AACxE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/base64.js"],"sourcesContent":["// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    // if (es % 3 !== 0)\n    // throw new Error('invalid base64 string');\n    if (base64Str[base64Str.length - 2] == '=')\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == '=')\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0 // previous byte\n    ;\n    for (let i = 0; i < base64Str.length; i++) {\n        b = decTable[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            // noinspection FallThroughInSwitchStatementJS\n            switch (base64Str[i]) {\n                case '=':\n                    groupPos = 0; // reset state when padding found\n                case '\\n':\n                case '\\r':\n                case '\\t':\n                case ' ':\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(`invalid base64 string.`);\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = (p & 3) << 6 | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(`invalid base64 string.`);\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n    let base64 = '', groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += encTable[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += encTable[p | b >> 4];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += encTable[p | b >> 6];\n                base64 += encTable[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // padding required?\n    if (groupPos) {\n        base64 += encTable[p];\n        base64 += '=';\n        if (groupPos == 1)\n            base64 += '=';\n    }\n    return base64;\n}\n"],"names":[],"mappings":"AAAA,6CAA6C;;;;;AAC7C,IAAI,WAAW,mEAAmE,KAAK,CAAC;AACxF,qFAAqF;AACrF,IAAI,WAAW,EAAE;AACjB,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IACjC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,GAAG;AAC1C,6BAA6B;AAC7B,QAAQ,CAAC,IAAI,UAAU,CAAC,GAAG,GAAG,SAAS,OAAO,CAAC;AAC/C,QAAQ,CAAC,IAAI,UAAU,CAAC,GAAG,GAAG,SAAS,OAAO,CAAC;AAYxC,SAAS,aAAa,SAAS;IAClC,sEAAsE;IACtE,IAAI,KAAK,UAAU,MAAM,GAAG,IAAI;IAChC,oBAAoB;IACpB,4CAA4C;IAC5C,IAAI,SAAS,CAAC,UAAU,MAAM,GAAG,EAAE,IAAI,KACnC,MAAM;SACL,IAAI,SAAS,CAAC,UAAU,MAAM,GAAG,EAAE,IAAI,KACxC,MAAM;IACV,IAAI,QAAQ,IAAI,WAAW,KAAK,UAAU,GAC1C,WAAW,GACX,GACA,IAAI,EAAE,gBAAgB;;IAEtB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;QACvC,IAAI,QAAQ,CAAC,UAAU,UAAU,CAAC,GAAG;QACrC,IAAI,MAAM,WAAW;YACjB,8CAA8C;YAC9C,OAAQ,SAAS,CAAC,EAAE;gBAChB,KAAK;oBACD,WAAW,GAAG,iCAAiC;gBACnD,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;oBACD,UAAU,gCAAgC;gBAC9C;oBACI,MAAM,MAAM,CAAC,sBAAsB,CAAC;YAC5C;QACJ;QACA,OAAQ;YACJ,KAAK;gBACD,IAAI;gBACJ,WAAW;gBACX;YACJ,KAAK;gBACD,KAAK,CAAC,UAAU,GAAG,KAAK,IAAI,CAAC,IAAI,EAAE,KAAK;gBACxC,IAAI;gBACJ,WAAW;gBACX;YACJ,KAAK;gBACD,KAAK,CAAC,UAAU,GAAG,CAAC,IAAI,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,KAAK;gBAC/C,IAAI;gBACJ,WAAW;gBACX;YACJ,KAAK;gBACD,KAAK,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI;gBAClC,WAAW;gBACX;QACR;IACJ;IACA,IAAI,YAAY,GACZ,MAAM,MAAM,CAAC,sBAAsB,CAAC;IACxC,OAAO,MAAM,QAAQ,CAAC,GAAG;AAC7B;AAMO,SAAS,aAAa,KAAK;IAC9B,IAAI,SAAS,IAAI,WAAW,GAC5B,GACA,IAAI,GAAG,gCAAgC;IACvC,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACnC,IAAI,KAAK,CAAC,EAAE;QACZ,OAAQ;YACJ,KAAK;gBACD,UAAU,QAAQ,CAAC,KAAK,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,KAAK;gBACf,WAAW;gBACX;YACJ,KAAK;gBACD,UAAU,QAAQ,CAAC,IAAI,KAAK,EAAE;gBAC9B,IAAI,CAAC,IAAI,EAAE,KAAK;gBAChB,WAAW;gBACX;YACJ,KAAK;gBACD,UAAU,QAAQ,CAAC,IAAI,KAAK,EAAE;gBAC9B,UAAU,QAAQ,CAAC,IAAI,GAAG;gBAC1B,WAAW;gBACX;QACR;IACJ;IACA,oBAAoB;IACpB,IAAI,UAAU;QACV,UAAU,QAAQ,CAAC,EAAE;QACrB,UAAU;QACV,IAAI,YAAY,GACZ,UAAU;IAClB;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 587, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/goog-varint.js"],"sourcesContent":["// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0F) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !((shift >>> 7) == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);\n    const hasMoreBits = !((hi >> 3) == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !((shift >>> 7) == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n    // Check for minus sign.\n    let minus = dec[0] == '-';\n    if (minus)\n        dec = dec.slice(1);\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to highBits\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    if ((bitsHigh >>> 0) <= 0x1FFFFF) {\n        return '' + (TWO_PWR_32_DBL * bitsHigh + (bitsLow >>> 0));\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    let low = bitsLow & 0xFFFFFF;\n    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;\n    let high = (bitsHigh >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    let base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // Convert base-1e7 digits to base-10, with optional leading zeroes.\n    function decimalFrom1e7(digit1e7, needLeadingZeros) {\n        let partial = digit1e7 ? String(digit1e7) : '';\n        if (needLeadingZeros) {\n            return '0000000'.slice(partial.length) + partial;\n        }\n        return partial;\n    }\n    return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +\n        decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +\n        // If the final 1e7 digit didn't need leading zeros, we would have\n        // returned via the trivial code path at the top.\n        decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7F;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0F) << 28;\n    for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error('invalid varint');\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 838, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/pb-long.js"],"sourcesContent":["import { int64fromString, int64toString } from \"./goog-varint\";\nlet BI;\nexport function detectBi() {\n    const dv = new DataView(new ArrayBuffer(8));\n    const ok = globalThis.BigInt !== undefined\n        && typeof dv.getBigInt64 === \"function\"\n        && typeof dv.getBigUint64 === \"function\"\n        && typeof dv.setBigInt64 === \"function\"\n        && typeof dv.setBigUint64 === \"function\";\n    BI = ok ? {\n        MIN: BigInt(\"-9223372036854775808\"),\n        MAX: BigInt(\"9223372036854775807\"),\n        UMIN: BigInt(\"0\"),\n        UMAX: BigInt(\"18446744073709551615\"),\n        C: BigInt,\n        V: dv,\n    } : undefined;\n}\ndetectBi();\nfunction assertBi(bi) {\n    if (!bi)\n        throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\nconst HALF_2_PWR_32 = 0x080000000;\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n    /**\n     * Create a new instance with the given bits.\n     */\n    constructor(lo, hi) {\n        this.lo = lo | 0;\n        this.hi = hi | 0;\n    }\n    /**\n     * Is this instance equal to 0?\n     */\n    isZero() {\n        return this.lo == 0 && this.hi == 0;\n    }\n    /**\n     * Convert to a native number.\n     */\n    toNumber() {\n        let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n        if (!Number.isSafeInteger(result))\n            throw new Error(\"cannot convert to safe number\");\n        return result;\n    }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.UMIN)\n                        throw new Error('signed value for ulong');\n                    if (value > BI.UMAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigUint64(0, value, true);\n                    return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(lo, hi);\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    if (value < 0)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(value, value / TWO_PWR_32_DBL);\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigUint64(0, true);\n    }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.MIN)\n                        throw new Error('signed long too small');\n                    if (value > BI.MAX)\n                        throw new Error('signed long too large');\n                    BI.V.setBigInt64(0, value, true);\n                    return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus) {\n                        if (hi > HALF_2_PWR_32 || (hi == HALF_2_PWR_32 && lo != 0))\n                            throw new Error('signed long too small');\n                    }\n                    else if (hi >= HALF_2_PWR_32)\n                        throw new Error('signed long too large');\n                    let pbl = new PbLong(lo, hi);\n                    return minus ? pbl.negate() : pbl;\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    return value > 0\n                        ? new PbLong(value, value / TWO_PWR_32_DBL)\n                        : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Do we have a minus sign?\n     */\n    isNegative() {\n        return (this.hi & HALF_2_PWR_32) !== 0;\n    }\n    /**\n     * Negate two's complement.\n     * Invert all the bits and add one to the result.\n     */\n    negate() {\n        let hi = ~this.hi, lo = this.lo;\n        if (lo)\n            lo = ~lo + 1;\n        else\n            hi += 1;\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        if (BI)\n            return this.toBigInt().toString();\n        if (this.isNegative()) {\n            let n = this.negate();\n            return '-' + int64toString(n.lo, n.hi);\n        }\n        return int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigInt64(0, true);\n    }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1021, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/assert.js"],"sourcesContent":["/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid int 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid uint 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid float 32: ' + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error('invalid float 32: ' + arg);\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;;AACM,SAAS,OAAO,SAAS,EAAE,GAAG;IACjC,IAAI,CAAC,WAAW;QACZ,MAAM,IAAI,MAAM;IACpB;AACJ;AAIO,SAAS,YAAY,KAAK,EAAE,GAAG;IAClC,MAAM,IAAI,MAAM,QAAQ,QAAQ,QAAQ,KAAK,IAAI,MAAM,wBAAwB;AACnF;AACA,MAAM,cAAc,wBAAwB,cAAc,CAAC,wBAAwB,aAAa,YAAY,YAAY,YAAY,YAAY,CAAC;AAC1I,SAAS,YAAY,GAAG;IAC3B,IAAI,OAAO,QAAQ,UACf,MAAM,IAAI,MAAM,qBAAqB,OAAO;IAChD,IAAI,CAAC,OAAO,SAAS,CAAC,QAAQ,MAAM,aAAa,MAAM,WACnD,MAAM,IAAI,MAAM,qBAAqB;AAC7C;AACO,SAAS,aAAa,GAAG;IAC5B,IAAI,OAAO,QAAQ,UACf,MAAM,IAAI,MAAM,sBAAsB,OAAO;IACjD,IAAI,CAAC,OAAO,SAAS,CAAC,QAAQ,MAAM,cAAc,MAAM,GACpD,MAAM,IAAI,MAAM,sBAAsB;AAC9C;AACO,SAAS,cAAc,GAAG;IAC7B,IAAI,OAAO,QAAQ,UACf,MAAM,IAAI,MAAM,uBAAuB,OAAO;IAClD,IAAI,CAAC,OAAO,QAAQ,CAAC,MACjB;IACJ,IAAI,MAAM,eAAe,MAAM,aAC3B,MAAM,IAAI,MAAM,uBAAuB;AAC/C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1058, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-long-convert.js"],"sourcesContent":["import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n    switch (type) {\n        case LongType.BIGINT:\n            return long.toBigInt();\n        case LongType.NUMBER:\n            return long.toNumber();\n        default:\n            // case undefined:\n            // case LongType.STRING:\n            return long.toString();\n    }\n}\n"],"names":[],"mappings":";;;AAAA;;AAQO,SAAS,sBAAsB,IAAI,EAAE,IAAI;IAC5C,OAAQ;QACJ,KAAK,oLAAA,CAAA,WAAQ,CAAC,MAAM;YAChB,OAAO,KAAK,QAAQ;QACxB,KAAK,oLAAA,CAAA,WAAQ,CAAC,MAAM;YAChB,OAAO,KAAK,QAAQ;QACxB;YACI,kBAAkB;YAClB,wBAAwB;YACxB,OAAO,KAAK,QAAQ;IAC5B;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1081, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-json-reader.js"],"sourcesContent":["import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (this.fMap === undefined) {\n            this.fMap = {};\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            for (const field of fieldsInput) {\n                this.fMap[field.name] = field;\n                this.fMap[field.jsonName] = field;\n                this.fMap[field.localName] = field;\n            }\n        }\n    }\n    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n    assert(condition, fieldName, jsonValue) {\n        if (!condition) {\n            let what = typeofJsonValue(jsonValue);\n            if (what == \"number\" || what == \"boolean\")\n                what = jsonValue.toString();\n            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n        }\n    }\n    /**\n     * Reads a message from canonical JSON format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(input, message, options) {\n        this.prepare();\n        const oneofsHandled = [];\n        for (const [jsonKey, jsonValue] of Object.entries(input)) {\n            const field = this.fMap[jsonKey];\n            if (!field) {\n                if (!options.ignoreUnknownFields)\n                    throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n                continue;\n            }\n            const localName = field.localName;\n            // handle oneof ADT\n            let target; // this will be the target for the field value, whether it is member of a oneof or not\n            if (field.oneof) {\n                if (jsonValue === null && (field.kind !== 'enum' || field.T()[0] !== 'google.protobuf.NullValue')) {\n                    continue;\n                }\n                // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n                if (oneofsHandled.includes(field.oneof))\n                    throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n                oneofsHandled.push(field.oneof);\n                target = message[field.oneof] = {\n                    oneofKind: localName\n                };\n            }\n            else {\n                target = message;\n            }\n            // we have handled oneof above. we just have read the value into `target`.\n            if (field.kind == 'map') {\n                if (jsonValue === null) {\n                    continue;\n                }\n                // check input\n                this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n                // our target to put map entries into\n                const fieldObj = target[localName];\n                // read entries\n                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n                    this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n                    // read value\n                    let val;\n                    switch (field.V.kind) {\n                        case \"message\":\n                            val = field.V.T().internalJsonRead(jsonObjValue, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields);\n                            if (val === false)\n                                continue;\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n                    // read key\n                    let key = jsonObjKey;\n                    if (field.K == ScalarType.BOOL)\n                        key = key == \"true\" ? true : key == \"false\" ? false : key;\n                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n                    fieldObj[key] = val;\n                }\n            }\n            else if (field.repeat) {\n                if (jsonValue === null)\n                    continue;\n                // check input\n                this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n                // our target to put array entries into\n                const fieldArr = target[localName];\n                // read array entries\n                for (const jsonItem of jsonValue) {\n                    this.assert(jsonItem !== null, field.name, null);\n                    let val;\n                    switch (field.kind) {\n                        case \"message\":\n                            val = field.T().internalJsonRead(jsonItem, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields);\n                            if (val === false)\n                                continue;\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonItem, field.T, field.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name, jsonValue);\n                    fieldArr.push(val);\n                }\n            }\n            else {\n                switch (field.kind) {\n                    case \"message\":\n                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n                            this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n                            continue;\n                        }\n                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n                        break;\n                    case \"enum\":\n                        if (jsonValue === null)\n                            continue;\n                        let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);\n                        if (val === false)\n                            continue;\n                        target[localName] = val;\n                        break;\n                    case \"scalar\":\n                        if (jsonValue === null)\n                            continue;\n                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * Returns `false` for unrecognized string representations.\n     *\n     * google.protobuf.NullValue accepts only JSON `null` (or the old `\"NULL_VALUE\"`).\n     */\n    enum(type, json, fieldName, ignoreUnknownFields) {\n        if (type[0] == 'google.protobuf.NullValue')\n            assert(json === null || json === \"NULL_VALUE\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n        if (json === null)\n            // we require 0 to be default value for all enums\n            return 0;\n        switch (typeof json) {\n            case \"number\":\n                assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n                return json;\n            case \"string\":\n                let localEnumName = json;\n                if (type[2] && json.substring(0, type[2].length) === type[2])\n                    // lookup without the shared prefix\n                    localEnumName = json.substring(type[2].length);\n                let enumNumber = type[1][localEnumName];\n                if (typeof enumNumber === 'undefined' && ignoreUnknownFields) {\n                    return false;\n                }\n                assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n                return enumNumber;\n        }\n        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n    }\n    scalar(json, type, longType, fieldName) {\n        let e;\n        try {\n            switch (type) {\n                // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n                // Either numbers or strings are accepted. Exponent notation is also accepted.\n                case ScalarType.DOUBLE:\n                case ScalarType.FLOAT:\n                    if (json === null)\n                        return .0;\n                    if (json === \"NaN\")\n                        return Number.NaN;\n                    if (json === \"Infinity\")\n                        return Number.POSITIVE_INFINITY;\n                    if (json === \"-Infinity\")\n                        return Number.NEGATIVE_INFINITY;\n                    if (json === \"\") {\n                        e = \"empty string\";\n                        break;\n                    }\n                    if (typeof json == \"string\" && json.trim().length !== json.length) {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    if (typeof json != \"string\" && typeof json != \"number\") {\n                        break;\n                    }\n                    let float = Number(json);\n                    if (Number.isNaN(float)) {\n                        e = \"not a number\";\n                        break;\n                    }\n                    if (!Number.isFinite(float)) {\n                        // infinity and -infinity are handled by string representation above, so this is an error\n                        e = \"too large or small\";\n                        break;\n                    }\n                    if (type == ScalarType.FLOAT)\n                        assertFloat32(float);\n                    return float;\n                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n                case ScalarType.INT32:\n                case ScalarType.FIXED32:\n                case ScalarType.SFIXED32:\n                case ScalarType.SINT32:\n                case ScalarType.UINT32:\n                    if (json === null)\n                        return 0;\n                    let int32;\n                    if (typeof json == \"number\")\n                        int32 = json;\n                    else if (json === \"\")\n                        e = \"empty string\";\n                    else if (typeof json == \"string\") {\n                        if (json.trim().length !== json.length)\n                            e = \"extra whitespace\";\n                        else\n                            int32 = Number(json);\n                    }\n                    if (int32 === undefined)\n                        break;\n                    if (type == ScalarType.UINT32)\n                        assertUInt32(int32);\n                    else\n                        assertInt32(int32);\n                    return int32;\n                // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n                case ScalarType.INT64:\n                case ScalarType.SFIXED64:\n                case ScalarType.SINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbLong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbLong.from(json), longType);\n                case ScalarType.FIXED64:\n                case ScalarType.UINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbULong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbULong.from(json), longType);\n                // bool:\n                case ScalarType.BOOL:\n                    if (json === null)\n                        return false;\n                    if (typeof json !== \"boolean\")\n                        break;\n                    return json;\n                // string:\n                case ScalarType.STRING:\n                    if (json === null)\n                        return \"\";\n                    if (typeof json !== \"string\") {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    try {\n                        encodeURIComponent(json);\n                    }\n                    catch (e) {\n                        e = \"invalid UTF8\";\n                        break;\n                    }\n                    return json;\n                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n                // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n                case ScalarType.BYTES:\n                    if (json === null || json === \"\")\n                        return new Uint8Array(0);\n                    if (typeof json !== 'string')\n                        break;\n                    return base64decode(json);\n            }\n        }\n        catch (error) {\n            e = error.message;\n        }\n        this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1362, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-json-writer.js"],"sourcesContent":["import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Converts the message to a JSON object, based on the field descriptors.\n     */\n    write(message, options) {\n        const json = {}, source = message;\n        for (const field of this.fields) {\n            // field is not part of a oneof, simply write as is\n            if (!field.oneof) {\n                let jsonValue = this.field(field, source[field.localName], options);\n                if (jsonValue !== undefined)\n                    json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n                continue;\n            }\n            // field is part of a oneof\n            const group = source[field.oneof];\n            if (group.oneofKind !== field.localName)\n                continue; // not selected, skip\n            const opt = field.kind == 'scalar' || field.kind == 'enum'\n                ? Object.assign(Object.assign({}, options), { emitDefaultValues: true }) : options;\n            let jsonValue = this.field(field, group[field.localName], opt);\n            assert(jsonValue !== undefined);\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        return json;\n    }\n    field(field, value, options) {\n        let jsonValue = undefined;\n        if (field.kind == 'map') {\n            assert(typeof value == \"object\" && value !== null);\n            const jsonObj = {};\n            switch (field.V.kind) {\n                case \"scalar\":\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.message(messageType, entryValue, field.name, options);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        assert(entryValue === undefined || typeof entryValue == 'number');\n                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n            }\n            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)\n                jsonValue = jsonObj;\n        }\n        else if (field.repeat) {\n            assert(Array.isArray(value));\n            const jsonArr = [];\n            switch (field.kind) {\n                case \"scalar\":\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        assert(value[i] === undefined || typeof value[i] == 'number');\n                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.message(messageType, value[i], field.name, options);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n            }\n            // add converted array to json output\n            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)\n                jsonValue = jsonArr;\n        }\n        else {\n            switch (field.kind) {\n                case \"scalar\":\n                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n                    break;\n                case \"enum\":\n                    jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n                    break;\n                case \"message\":\n                    jsonValue = this.message(field.T(), value, field.name, options);\n                    break;\n            }\n        }\n        return jsonValue;\n    }\n    /**\n     * Returns `null` as the default for google.protobuf.NullValue.\n     */\n    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n        if (type[0] == 'google.protobuf.NullValue')\n            return !emitDefaultValues && !optional ? undefined : null;\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        if (value === 0 && !emitDefaultValues && !optional)\n            // we require 0 to be default value for all enums\n            return undefined;\n        assert(typeof value == 'number');\n        assert(Number.isInteger(value));\n        if (enumAsInteger || !type[1].hasOwnProperty(value))\n            // if we don't now the enum value, just return the number\n            return value;\n        if (type[2])\n            // restore the dropped prefix\n            return type[2] + type[1][value];\n        return type[1][value];\n    }\n    message(type, value, fieldName, options) {\n        if (value === undefined)\n            return options.emitDefaultValues ? null : undefined;\n        return type.internalJsonWrite(value, options);\n    }\n    scalar(type, value, fieldName, optional, emitDefaultValues) {\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        const ed = emitDefaultValues || optional;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (type) {\n            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n            case ScalarType.INT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertInt32(value);\n                return value;\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertUInt32(value);\n                return value;\n            // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n            // Either numbers or strings are accepted. Exponent notation is also accepted.\n            case ScalarType.FLOAT:\n                assertFloat32(value);\n            case ScalarType.DOUBLE:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assert(typeof value == 'number');\n                if (Number.isNaN(value))\n                    return 'NaN';\n                if (value === Number.POSITIVE_INFINITY)\n                    return 'Infinity';\n                if (value === Number.NEGATIVE_INFINITY)\n                    return '-Infinity';\n                return value;\n            // string:\n            case ScalarType.STRING:\n                if (value === \"\")\n                    return ed ? '' : undefined;\n                assert(typeof value == 'string');\n                return value;\n            // bool:\n            case ScalarType.BOOL:\n                if (value === false)\n                    return ed ? false : undefined;\n                assert(typeof value == 'boolean');\n                return value;\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let ulong = PbULong.from(value);\n                if (ulong.isZero() && !ed)\n                    return undefined;\n                return ulong.toString();\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let long = PbLong.from(value);\n                if (long.isZero() && !ed)\n                    return undefined;\n                return long.toString();\n            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n            // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n            case ScalarType.BYTES:\n                assert(value instanceof Uint8Array);\n                if (!value.byteLength)\n                    return ed ? \"\" : undefined;\n                return base64encode(value);\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1572, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/binary-format-contract.js"],"sourcesContent":["/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n    /**\n     * The symbol used to store unknown fields for a message.\n     * The property must conform to `UnknownFieldContainer`.\n     */\n    UnknownFieldHandler.symbol = Symbol.for(\"protobuf-ts/unknown\");\n    /**\n     * Store an unknown field during binary read directly on the message.\n     * This method is compatible with `BinaryReadOptions.readUnknownField`.\n     */\n    UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n        let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n        container.push({ no: fieldNo, wireType, data });\n    };\n    /**\n     * Write unknown fields stored for the message to the writer.\n     * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n     */\n    UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n        for (let { no, wireType, data } of UnknownFieldHandler.list(message))\n            writer.tag(no, wireType).raw(data);\n    };\n    /**\n     * List unknown fields stored for the message.\n     * Note that there may be multiples fields with the same number.\n     */\n    UnknownFieldHandler.list = (message, fieldNo) => {\n        if (is(message)) {\n            let all = message[UnknownFieldHandler.symbol];\n            return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n        }\n        return [];\n    };\n    /**\n     * Returns the last unknown field by field number.\n     */\n    UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n    const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n    return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;;;AACM,IAAI;AACX,CAAC,SAAU,mBAAmB;IAC1B;;;KAGC,GACD,oBAAoB,MAAM,GAAG,OAAO,GAAG,CAAC;IACxC;;;KAGC,GACD,oBAAoB,MAAM,GAAG,CAAC,UAAU,SAAS,SAAS,UAAU;QAChE,IAAI,YAAY,GAAG,WAAW,OAAO,CAAC,oBAAoB,MAAM,CAAC,GAAG,OAAO,CAAC,oBAAoB,MAAM,CAAC,GAAG,EAAE;QAC5G,UAAU,IAAI,CAAC;YAAE,IAAI;YAAS;YAAU;QAAK;IACjD;IACA;;;KAGC,GACD,oBAAoB,OAAO,GAAG,CAAC,UAAU,SAAS;QAC9C,KAAK,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,oBAAoB,IAAI,CAAC,SACxD,OAAO,GAAG,CAAC,IAAI,UAAU,GAAG,CAAC;IACrC;IACA;;;KAGC,GACD,oBAAoB,IAAI,GAAG,CAAC,SAAS;QACjC,IAAI,GAAG,UAAU;YACb,IAAI,MAAM,OAAO,CAAC,oBAAoB,MAAM,CAAC;YAC7C,OAAO,UAAU,IAAI,MAAM,CAAC,CAAA,KAAM,GAAG,EAAE,IAAI,WAAW;QAC1D;QACA,OAAO,EAAE;IACb;IACA;;KAEC,GACD,oBAAoB,IAAI,GAAG,CAAC,SAAS,UAAY,oBAAoB,IAAI,CAAC,SAAS,SAAS,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;IACxG,MAAM,KAAK,CAAC,UAAY,WAAW,MAAM,OAAO,CAAC,OAAO,CAAC,oBAAoB,MAAM,CAAC;AACxF,CAAC,EAAE,uBAAuB,CAAC,sBAAsB,CAAC,CAAC;AAI5C,SAAS,mBAAmB,CAAC,EAAE,CAAC;IACnC,OAAO,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,GAAG,IAAI;AAC/C;AASO,IAAI;AACX,CAAC,SAAU,QAAQ;IACf;;KAEC,GACD,QAAQ,CAAC,QAAQ,CAAC,SAAS,GAAG,EAAE,GAAG;IACnC;;;KAGC,GACD,QAAQ,CAAC,QAAQ,CAAC,QAAQ,GAAG,EAAE,GAAG;IAClC;;;;;;KAMC,GACD,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,GAAG,EAAE,GAAG;IAC5C;;;KAGC,GACD,QAAQ,CAAC,QAAQ,CAAC,aAAa,GAAG,EAAE,GAAG;IACvC;;;KAGC,GACD,QAAQ,CAAC,QAAQ,CAAC,WAAW,GAAG,EAAE,GAAG;IACrC;;;KAGC,GACD,QAAQ,CAAC,QAAQ,CAAC,QAAQ,GAAG,EAAE,GAAG;AACtC,CAAC,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1659, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-scalar-default.js"],"sourcesContent":["import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return reflectionLongConvert(PbULong.ZERO, longType);\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return reflectionLongConvert(PbLong.ZERO, longType);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // case ScalarType.INT32:\n            // case ScalarType.UINT32:\n            // case ScalarType.SINT32:\n            // case ScalarType.FIXED32:\n            // case ScalarType.SFIXED32:\n            return 0;\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAIO,SAAS,wBAAwB,IAAI,EAAE,WAAW,oLAAA,CAAA,WAAQ,CAAC,MAAM;IACpE,OAAQ;QACJ,KAAK,oLAAA,CAAA,aAAU,CAAC,IAAI;YAChB,OAAO;QACX,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;QACtB,KAAK,oLAAA,CAAA,aAAU,CAAC,OAAO;YACnB,OAAO,CAAA,GAAA,+LAAA,CAAA,wBAAqB,AAAD,EAAE,4KAAA,CAAA,UAAO,CAAC,IAAI,EAAE;QAC/C,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK;QACrB,KAAK,oLAAA,CAAA,aAAU,CAAC,QAAQ;QACxB,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;YAClB,OAAO,CAAA,GAAA,+LAAA,CAAA,wBAAqB,AAAD,EAAE,4KAAA,CAAA,SAAM,CAAC,IAAI,EAAE;QAC9C,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;QACtB,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK;YACjB,OAAO;QACX,KAAK,oLAAA,CAAA,aAAU,CAAC,KAAK;YACjB,OAAO,IAAI,WAAW;QAC1B,KAAK,oLAAA,CAAA,aAAU,CAAC,MAAM;YAClB,OAAO;QACX;YACI,yBAAyB;YACzB,0BAA0B;YAC1B,0BAA0B;YAC1B,2BAA2B;YAC3B,4BAA4B;YAC5B,OAAO;IACf;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1701, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-binary-reader.js"],"sourcesContent":["import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (!this.fieldNoToField) {\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n        }\n    }\n    /**\n     * Reads a message from binary format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(reader, message, options, length) {\n        this.prepare();\n        const end = length === undefined ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n            // read the tag and find the field\n            const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);\n            if (!field) {\n                let u = options.readUnknownField;\n                if (u == \"throw\")\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n                let d = reader.skip(wireType);\n                if (u !== false)\n                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n                continue;\n            }\n            // target object for the field we are reading\n            let target = message, repeated = field.repeat, localName = field.localName;\n            // if field is member of oneof ADT, use ADT as target\n            if (field.oneof) {\n                target = target[field.oneof];\n                // if other oneof member selected, set new ADT\n                if (target.oneofKind !== localName)\n                    target = message[field.oneof] = {\n                        oneofKind: localName\n                    };\n            }\n            // we have handled oneof above, we just have read the value into `target[localName]`\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    let L = field.kind == \"scalar\" ? field.L : undefined;\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n                            let e = reader.uint32() + reader.pos;\n                            while (reader.pos < e)\n                                arr.push(this.scalar(reader, T, L));\n                        }\n                        else\n                            arr.push(this.scalar(reader, T, L));\n                    }\n                    else\n                        target[localName] = this.scalar(reader, T, L);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n                        arr.push(msg);\n                    }\n                    else\n                        target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n                    break;\n                case \"map\":\n                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n                    // safe to assume presence of map object, oneof cannot contain repeated values\n                    target[localName][mapKey] = mapVal;\n                    break;\n            }\n        }\n    }\n    /**\n     * Read a map field, expecting key field = 1, value field = 2\n     */\n    mapEntry(field, reader, options) {\n        let length = reader.uint32();\n        let end = reader.pos + length;\n        let key = undefined; // javascript only allows number or string for object properties\n        let val = undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    if (field.K == ScalarType.BOOL)\n                        key = reader.bool().toString();\n                    else\n                        // long types are read as string, number types are okay as number\n                        key = this.scalar(reader, field.K, LongType.STRING);\n                    break;\n                case 2:\n                    switch (field.V.kind) {\n                        case \"scalar\":\n                            val = this.scalar(reader, field.V.T, field.V.L);\n                            break;\n                        case \"enum\":\n                            val = reader.int32();\n                            break;\n                        case \"message\":\n                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n                            break;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n            }\n        }\n        if (key === undefined) {\n            let keyRaw = reflectionScalarDefault(field.K);\n            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n        }\n        if (val === undefined)\n            switch (field.V.kind) {\n                case \"scalar\":\n                    val = reflectionScalarDefault(field.V.T, field.V.L);\n                    break;\n                case \"enum\":\n                    val = 0;\n                    break;\n                case \"message\":\n                    val = field.V.T().create();\n                    break;\n            }\n        return [key, val];\n    }\n    scalar(reader, type, longType) {\n        switch (type) {\n            case ScalarType.INT32:\n                return reader.int32();\n            case ScalarType.STRING:\n                return reader.string();\n            case ScalarType.BOOL:\n                return reader.bool();\n            case ScalarType.DOUBLE:\n                return reader.double();\n            case ScalarType.FLOAT:\n                return reader.float();\n            case ScalarType.INT64:\n                return reflectionLongConvert(reader.int64(), longType);\n            case ScalarType.UINT64:\n                return reflectionLongConvert(reader.uint64(), longType);\n            case ScalarType.FIXED64:\n                return reflectionLongConvert(reader.fixed64(), longType);\n            case ScalarType.FIXED32:\n                return reader.fixed32();\n            case ScalarType.BYTES:\n                return reader.bytes();\n            case ScalarType.UINT32:\n                return reader.uint32();\n            case ScalarType.SFIXED32:\n                return reader.sfixed32();\n            case ScalarType.SFIXED64:\n                return reflectionLongConvert(reader.sfixed64(), longType);\n            case ScalarType.SINT32:\n                return reader.sint32();\n            case ScalarType.SINT64:\n                return reflectionLongConvert(reader.sint64(), longType);\n        }\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1879, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-binary-writer.js"],"sourcesContent":["import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        if (!this.fields) {\n            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n            this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n        }\n    }\n    /**\n     * Writes the message to binary format.\n     */\n    write(message, writer, options) {\n        this.prepare();\n        for (const field of this.fields) {\n            let value, // this will be our field value, whether it is member of a oneof or not\n            emitDefault, // whether we emit the default value (only true for oneof members)\n            repeated = field.repeat, localName = field.localName;\n            // handle oneof ADT\n            if (field.oneof) {\n                const group = message[field.oneof];\n                if (group.oneofKind !== localName)\n                    continue; // if field is not selected, skip\n                value = group[localName];\n                emitDefault = true;\n            }\n            else {\n                value = message[localName];\n                emitDefault = false;\n            }\n            // we have handled oneof above. we just have to honor `emitDefault`.\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        if (repeated == RepeatType.PACKED)\n                            this.packed(writer, T, field.no, value);\n                        else\n                            for (const item of value)\n                                this.scalar(writer, T, field.no, item, true);\n                    }\n                    else if (value === undefined)\n                        assert(field.opt);\n                    else\n                        this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        for (const item of value)\n                            this.message(writer, options, field.T(), field.no, item);\n                    }\n                    else {\n                        this.message(writer, options, field.T(), field.no, value);\n                    }\n                    break;\n                case \"map\":\n                    assert(typeof value == 'object' && value !== null);\n                    for (const [key, val] of Object.entries(value))\n                        this.mapEntry(writer, options, field, key, val);\n                    break;\n            }\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n    }\n    mapEntry(writer, options, field, key, value) {\n        writer.tag(field.no, WireType.LengthDelimited);\n        writer.fork();\n        // javascript only allows number or string for object properties\n        // we convert from our representation to the protobuf type\n        let keyValue = key;\n        switch (field.K) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                keyValue = Number.parseInt(key);\n                break;\n            case ScalarType.BOOL:\n                assert(key == 'true' || key == 'false');\n                keyValue = key == 'true';\n                break;\n        }\n        // write key, expecting key field number = 1\n        this.scalar(writer, field.K, 1, keyValue, true);\n        // write value, expecting value field number = 2\n        switch (field.V.kind) {\n            case 'scalar':\n                this.scalar(writer, field.V.T, 2, value, true);\n                break;\n            case 'enum':\n                this.scalar(writer, ScalarType.INT32, 2, value, true);\n                break;\n            case 'message':\n                this.message(writer, options, field.V.T(), 2, value);\n                break;\n        }\n        writer.join();\n    }\n    message(writer, options, handler, fieldNo, value) {\n        if (value === undefined)\n            return;\n        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n        writer.join();\n    }\n    /**\n     * Write a single scalar value.\n     */\n    scalar(writer, type, fieldNo, value, emitDefault) {\n        let [wireType, method, isDefault] = this.scalarInfo(type, value);\n        if (!isDefault || emitDefault) {\n            writer.tag(fieldNo, wireType);\n            writer[method](value);\n        }\n    }\n    /**\n     * Write an array of scalar values in packed format.\n     */\n    packed(writer, type, fieldNo, value) {\n        if (!value.length)\n            return;\n        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n        // write tag\n        writer.tag(fieldNo, WireType.LengthDelimited);\n        // begin length-delimited\n        writer.fork();\n        // write values without tags\n        let [, method,] = this.scalarInfo(type);\n        for (let i = 0; i < value.length; i++)\n            writer[method](value[i]);\n        // end length delimited\n        writer.join();\n    }\n    /**\n     * Get information for writing a scalar value.\n     *\n     * Returns tuple:\n     * [0]: appropriate WireType\n     * [1]: name of the appropriate method of IBinaryWriter\n     * [2]: whether the given value is a default value\n     *\n     * If argument `value` is omitted, [2] is always false.\n     */\n    scalarInfo(type, value) {\n        let t = WireType.Varint;\n        let m;\n        let i = value === undefined;\n        let d = value === 0;\n        switch (type) {\n            case ScalarType.INT32:\n                m = \"int32\";\n                break;\n            case ScalarType.STRING:\n                d = i || !value.length;\n                t = WireType.LengthDelimited;\n                m = \"string\";\n                break;\n            case ScalarType.BOOL:\n                d = value === false;\n                m = \"bool\";\n                break;\n            case ScalarType.UINT32:\n                m = \"uint32\";\n                break;\n            case ScalarType.DOUBLE:\n                t = WireType.Bit64;\n                m = \"double\";\n                break;\n            case ScalarType.FLOAT:\n                t = WireType.Bit32;\n                m = \"float\";\n                break;\n            case ScalarType.INT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"int64\";\n                break;\n            case ScalarType.UINT64:\n                d = i || PbULong.from(value).isZero();\n                m = \"uint64\";\n                break;\n            case ScalarType.FIXED64:\n                d = i || PbULong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"fixed64\";\n                break;\n            case ScalarType.BYTES:\n                d = i || !value.byteLength;\n                t = WireType.LengthDelimited;\n                m = \"bytes\";\n                break;\n            case ScalarType.FIXED32:\n                t = WireType.Bit32;\n                m = \"fixed32\";\n                break;\n            case ScalarType.SFIXED32:\n                t = WireType.Bit32;\n                m = \"sfixed32\";\n                break;\n            case ScalarType.SFIXED64:\n                d = i || PbLong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"sfixed64\";\n                break;\n            case ScalarType.SINT32:\n                m = \"sint32\";\n                break;\n            case ScalarType.SINT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"sint64\";\n                break;\n        }\n        return [t, m, i || d];\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2099, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-create.js"],"sourcesContent":["import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n    /**\n     * This ternary can be removed in the next major version.\n     * The `Object.create()` code path utilizes a new `messagePrototype`\n     * property on the `IMessageType` which has this same `MESSAGE_TYPE`\n     * non-enumerable property on it. Doing it this way means that we only\n     * pay the cost of `Object.defineProperty()` once per `IMessageType`\n     * class of once per \"instance\". The falsy code path is only provided\n     * for backwards compatibility in cases where the runtime library is\n     * updated without also updating the generated code.\n     */\n    const msg = type.messagePrototype\n        ? Object.create(type.messagePrototype)\n        : Object.defineProperty({}, MESSAGE_TYPE, { value: type });\n    for (let field of type.fields) {\n        let name = field.localName;\n        if (field.opt)\n            continue;\n        if (field.oneof)\n            msg[field.oneof] = { oneofKind: undefined };\n        else if (field.repeat)\n            msg[name] = [];\n        else\n            switch (field.kind) {\n                case \"scalar\":\n                    msg[name] = reflectionScalarDefault(field.T, field.L);\n                    break;\n                case \"enum\":\n                    // we require 0 to be default value for all enums\n                    msg[name] = 0;\n                    break;\n                case \"map\":\n                    msg[name] = {};\n                    break;\n            }\n    }\n    return msg;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAKO,SAAS,iBAAiB,IAAI;IACjC;;;;;;;;;KASC,GACD,MAAM,MAAM,KAAK,gBAAgB,GAC3B,OAAO,MAAM,CAAC,KAAK,gBAAgB,IACnC,OAAO,cAAc,CAAC,CAAC,GAAG,6LAAA,CAAA,eAAY,EAAE;QAAE,OAAO;IAAK;IAC5D,KAAK,IAAI,SAAS,KAAK,MAAM,CAAE;QAC3B,IAAI,OAAO,MAAM,SAAS;QAC1B,IAAI,MAAM,GAAG,EACT;QACJ,IAAI,MAAM,KAAK,EACX,GAAG,CAAC,MAAM,KAAK,CAAC,GAAG;YAAE,WAAW;QAAU;aACzC,IAAI,MAAM,MAAM,EACjB,GAAG,CAAC,KAAK,GAAG,EAAE;aAEd,OAAQ,MAAM,IAAI;YACd,KAAK;gBACD,GAAG,CAAC,KAAK,GAAG,CAAA,GAAA,iMAAA,CAAA,0BAAuB,AAAD,EAAE,MAAM,CAAC,EAAE,MAAM,CAAC;gBACpD;YACJ,KAAK;gBACD,iDAAiD;gBACjD,GAAG,CAAC,KAAK,GAAG;gBACZ;YACJ,KAAK;gBACD,GAAG,CAAC,KAAK,GAAG,CAAC;gBACb;QACR;IACR;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2147, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-merge-partial.js"],"sourcesContent":["/**\n * Copy partial data into the target message.\n *\n * If a singular scalar or enum field is present in the source, it\n * replaces the field in the target.\n *\n * If a singular message field is present in the source, it is merged\n * with the target field by calling mergePartial() of the responsible\n * message type.\n *\n * If a repeated field is present in the source, its values replace\n * all values in the target array, removing extraneous values.\n * Repeated message fields are copied, not merged.\n *\n * If a map field is present in the source, entries are added to the\n * target map, replacing entries with the same key. Entries that only\n * exist in the target remain. Entries with message values are copied,\n * not merged.\n *\n * Note that this function differs from protobuf merge semantics,\n * which appends repeated fields.\n */\nexport function reflectionMergePartial(info, target, source) {\n    let fieldValue, // the field value we are working with\n    input = source, output; // where we want our field value to go\n    for (let field of info.fields) {\n        let name = field.localName;\n        if (field.oneof) {\n            const group = input[field.oneof]; // this is the oneof`s group in the source\n            if ((group === null || group === void 0 ? void 0 : group.oneofKind) == undefined) { // the user is free to omit\n                continue; // we skip this field, and all other members too\n            }\n            fieldValue = group[name]; // our value comes from the the oneof group of the source\n            output = target[field.oneof]; // and our output is the oneof group of the target\n            output.oneofKind = group.oneofKind; // always update discriminator\n            if (fieldValue == undefined) {\n                delete output[name]; // remove any existing value\n                continue; // skip further work on field\n            }\n        }\n        else {\n            fieldValue = input[name]; // we are using the source directly\n            output = target; // we want our field value to go directly into the target\n            if (fieldValue == undefined) {\n                continue; // skip further work on field, existing value is used as is\n            }\n        }\n        if (field.repeat)\n            output[name].length = fieldValue.length; // resize target array to match source array\n        // now we just work with `fieldValue` and `output` to merge the value\n        switch (field.kind) {\n            case \"scalar\":\n            case \"enum\":\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = fieldValue[i]; // not a reference type\n                else\n                    output[name] = fieldValue; // not a reference type\n                break;\n            case \"message\":\n                let T = field.T();\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = T.create(fieldValue[i]);\n                else if (output[name] === undefined)\n                    output[name] = T.create(fieldValue); // nothing to merge with\n                else\n                    T.mergePartial(output[name], fieldValue);\n                break;\n            case \"map\":\n                // Map and repeated fields are simply overwritten, not appended or merged\n                switch (field.V.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        Object.assign(output[name], fieldValue); // elements are not reference types\n                        break;\n                    case \"message\":\n                        let T = field.V.T();\n                        for (let k of Object.keys(fieldValue))\n                            output[name][k] = T.create(fieldValue[k]);\n                        break;\n                }\n                break;\n        }\n    }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;CAqBC;;;AACM,SAAS,uBAAuB,IAAI,EAAE,MAAM,EAAE,MAAM;IACvD,IAAI,YACJ,QAAQ,QAAQ,QAAQ,sCAAsC;IAC9D,KAAK,IAAI,SAAS,KAAK,MAAM,CAAE;QAC3B,IAAI,OAAO,MAAM,SAAS;QAC1B,IAAI,MAAM,KAAK,EAAE;YACb,MAAM,QAAQ,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,0CAA0C;YAC5E,IAAI,CAAC,UAAU,QAAQ,UAAU,KAAK,IAAI,KAAK,IAAI,MAAM,SAAS,KAAK,WAAW;gBAC9E,UAAU,gDAAgD;YAC9D;YACA,aAAa,KAAK,CAAC,KAAK,EAAE,yDAAyD;YACnF,SAAS,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,kDAAkD;YAChF,OAAO,SAAS,GAAG,MAAM,SAAS,EAAE,8BAA8B;YAClE,IAAI,cAAc,WAAW;gBACzB,OAAO,MAAM,CAAC,KAAK,EAAE,4BAA4B;gBACjD,UAAU,6BAA6B;YAC3C;QACJ,OACK;YACD,aAAa,KAAK,CAAC,KAAK,EAAE,mCAAmC;YAC7D,SAAS,QAAQ,yDAAyD;YAC1E,IAAI,cAAc,WAAW;gBACzB,UAAU,2DAA2D;YACzE;QACJ;QACA,IAAI,MAAM,MAAM,EACZ,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,WAAW,MAAM,EAAE,4CAA4C;QACzF,qEAAqE;QACrE,OAAQ,MAAM,IAAI;YACd,KAAK;YACL,KAAK;gBACD,IAAI,MAAM,MAAM,EACZ,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IACnC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,EAAE,uBAAuB;qBAE5D,MAAM,CAAC,KAAK,GAAG,YAAY,uBAAuB;gBACtD;YACJ,KAAK;gBACD,IAAI,IAAI,MAAM,CAAC;gBACf,IAAI,MAAM,MAAM,EACZ,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IACnC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE;qBAC3C,IAAI,MAAM,CAAC,KAAK,KAAK,WACtB,MAAM,CAAC,KAAK,GAAG,EAAE,MAAM,CAAC,aAAa,wBAAwB;qBAE7D,EAAE,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE;gBACjC;YACJ,KAAK;gBACD,yEAAyE;gBACzE,OAAQ,MAAM,CAAC,CAAC,IAAI;oBAChB,KAAK;oBACL,KAAK;wBACD,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,mCAAmC;wBAC5E;oBACJ,KAAK;wBACD,IAAI,KAAI,MAAM,CAAC,CAAC,CAAC;wBACjB,KAAK,IAAI,KAAK,OAAO,IAAI,CAAC,YACtB,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,GAAE,MAAM,CAAC,UAAU,CAAC,EAAE;wBAC5C;gBACR;gBACA;QACR;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2230, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/json-format-contract.js"],"sourcesContent":["const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n}, defaultsRead = {\n    ignoreUnknownFields: false,\n};\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n    var _a, _b;\n    let c = Object.assign(Object.assign({}, a), b);\n    c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n    return c;\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAM,gBAAgB;IAClB,mBAAmB;IACnB,eAAe;IACf,mBAAmB;IACnB,cAAc;AAClB,GAAG,eAAe;IACd,qBAAqB;AACzB;AAIO,SAAS,gBAAgB,OAAO;IACnC,OAAO,UAAU,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,GAAG,eAAe,WAAW;AAC/E;AAIO,SAAS,iBAAiB,OAAO;IACpC,OAAO,UAAU,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB,WAAW;AAChF;AAIO,SAAS,iBAAiB,CAAC,EAAE,CAAC;IACjC,IAAI,IAAI;IACR,IAAI,IAAI,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,GAAG,IAAI;IAC5C,EAAE,YAAY,GAAG;WAAK,CAAC,KAAK,MAAM,QAAQ,MAAM,KAAK,IAAI,KAAK,IAAI,EAAE,YAAY,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,EAAE;WAAO,CAAC,KAAK,MAAM,QAAQ,MAAM,KAAK,IAAI,KAAK,IAAI,EAAE,YAAY,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,EAAE;KAAE;IAC7N,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2264, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/reflection-equals.js"],"sourcesContent":["import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    for (let field of info.fields) {\n        let localName = field.localName;\n        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n        switch (field.kind) {\n            case \"enum\":\n            case \"scalar\":\n                let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                if (!(field.repeat\n                    ? repeatedPrimitiveEq(t, val_a, val_b)\n                    : primitiveEq(t, val_a, val_b)))\n                    return false;\n                break;\n            case \"map\":\n                if (!(field.V.kind == \"message\"\n                    ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))\n                    : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))\n                    return false;\n                break;\n            case \"message\":\n                let T = field.T();\n                if (!(field.repeat\n                    ? repeatedMsgEq(T, val_a, val_b)\n                    : T.equals(val_a, val_b)))\n                    return false;\n                break;\n        }\n    }\n    return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n    if (a === b)\n        return true;\n    if (type !== ScalarType.BYTES)\n        return false;\n    let ba = a;\n    let bb = b;\n    if (ba.length !== bb.length)\n        return false;\n    for (let i = 0; i < ba.length; i++)\n        if (ba[i] != bb[i])\n            return false;\n    return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!primitiveEq(type, a[i], b[i]))\n            return false;\n    return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!type.equals(a[i], b[i]))\n            return false;\n    return true;\n}\n"],"names":[],"mappings":";;;AAAA;;AAOO,SAAS,iBAAiB,IAAI,EAAE,CAAC,EAAE,CAAC;IACvC,IAAI,MAAM,GACN,OAAO;IACX,IAAI,CAAC,KAAK,CAAC,GACP,OAAO;IACX,KAAK,IAAI,SAAS,KAAK,MAAM,CAAE;QAC3B,IAAI,YAAY,MAAM,SAAS;QAC/B,IAAI,QAAQ,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU;QAClE,IAAI,QAAQ,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU;QAClE,OAAQ,MAAM,IAAI;YACd,KAAK;YACL,KAAK;gBACD,IAAI,IAAI,MAAM,IAAI,IAAI,SAAS,oLAAA,CAAA,aAAU,CAAC,KAAK,GAAG,MAAM,CAAC;gBACzD,IAAI,CAAC,CAAC,MAAM,MAAM,GACZ,oBAAoB,GAAG,OAAO,SAC9B,YAAY,GAAG,OAAO,MAAM,GAC9B,OAAO;gBACX;YACJ,KAAK;gBACD,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,YAChB,cAAc,MAAM,CAAC,CAAC,CAAC,IAAI,aAAa,QAAQ,aAAa,UAC7D,oBAAoB,MAAM,CAAC,CAAC,IAAI,IAAI,SAAS,oLAAA,CAAA,aAAU,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,aAAa,QAAQ,aAAa,OAAO,GACtH,OAAO;gBACX;YACJ,KAAK;gBACD,IAAI,IAAI,MAAM,CAAC;gBACf,IAAI,CAAC,CAAC,MAAM,MAAM,GACZ,cAAc,GAAG,OAAO,SACxB,EAAE,MAAM,CAAC,OAAO,MAAM,GACxB,OAAO;gBACX;QACR;IACJ;IACA,OAAO;AACX;AACA,MAAM,eAAe,OAAO,MAAM;AAClC,SAAS,YAAY,IAAI,EAAE,CAAC,EAAE,CAAC;IAC3B,IAAI,MAAM,GACN,OAAO;IACX,IAAI,SAAS,oLAAA,CAAA,aAAU,CAAC,KAAK,EACzB,OAAO;IACX,IAAI,KAAK;IACT,IAAI,KAAK;IACT,IAAI,GAAG,MAAM,KAAK,GAAG,MAAM,EACvB,OAAO;IACX,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,EAAE,IAC3B,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EACd,OAAO;IACf,OAAO;AACX;AACA,SAAS,oBAAoB,IAAI,EAAE,CAAC,EAAE,CAAC;IACnC,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,EACrB,OAAO;IACX,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAC1B,IAAI,CAAC,YAAY,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAC7B,OAAO;IACf,OAAO;AACX;AACA,SAAS,cAAc,IAAI,EAAE,CAAC,EAAE,CAAC;IAC7B,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,EACrB,OAAO;IACX,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAC1B,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GACvB,OAAO;IACf,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2319, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/binary-writer.js"],"sourcesContent":["import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nconst defaultsWrite = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error('invalid state, fork stack empty');\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbLong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbULong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let long = PbLong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let long = PbLong.from(value), \n        // zigzag encode\n        sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let long = PbULong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2535, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/binary-reader.js"],"sourcesContent":["import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nconst defaultsRead = {\n    readUnknownField: true,\n    readerFactory: bytes => new BinaryReader(bytes),\n};\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder(\"utf-8\", {\n            fatal: true,\n            ignoreBOM: true,\n        });\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            case WireType.Bit64:\n                this.pos += 4;\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return new PbLong(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return new PbULong(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);\n        hi = (hi >>> 1 ^ s);\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return new PbULong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return new PbLong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32();\n        let start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2706, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/%40protobuf-ts/runtime/build/es2015/message-type.js"],"sourcesContent":["import { MESSAGE_TYPE } from \"./message-type-contract\";\nimport { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions, } from \"./json-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\nimport { binaryWriteOptions } from \"./binary-writer\";\nimport { binaryReadOptions } from \"./binary-reader\";\nconst baseDescriptors = Object.getOwnPropertyDescriptors(Object.getPrototypeOf({}));\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n    constructor(name, fields, options) {\n        this.defaultCheckDepth = 16;\n        this.typeName = name;\n        this.fields = fields.map(normalizeFieldInfo);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.messagePrototype = Object.create(null, Object.assign(Object.assign({}, baseDescriptors), { [MESSAGE_TYPE]: { value: this } }));\n        this.refTypeCheck = new ReflectionTypeCheck(this);\n        this.refJsonReader = new ReflectionJsonReader(this);\n        this.refJsonWriter = new ReflectionJsonWriter(this);\n        this.refBinReader = new ReflectionBinaryReader(this);\n        this.refBinWriter = new ReflectionBinaryWriter(this);\n    }\n    create(value) {\n        let message = reflectionCreate(this);\n        if (value !== undefined) {\n            reflectionMergePartial(this, message, value);\n        }\n        return message;\n    }\n    /**\n     * Clone the message.\n     *\n     * Unknown fields are discarded.\n     */\n    clone(message) {\n        let copy = this.create();\n        reflectionMergePartial(this, copy, message);\n        return copy;\n    }\n    /**\n     * Determines whether two message of the same type have the same field values.\n     * Checks for deep equality, traversing repeated fields, oneof groups, maps\n     * and messages recursively.\n     * Will also return true if both messages are `undefined`.\n     */\n    equals(a, b) {\n        return reflectionEquals(this, a, b);\n    }\n    /**\n     * Is the given value assignable to our message type\n     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    is(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, false);\n    }\n    /**\n     * Is the given value assignable to our message type,\n     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    isAssignable(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, true);\n    }\n    /**\n     * Copy partial data into the target message.\n     */\n    mergePartial(target, source) {\n        reflectionMergePartial(this, target, source);\n    }\n    /**\n     * Create a new message from binary format.\n     */\n    fromBinary(data, options) {\n        let opt = binaryReadOptions(options);\n        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n    }\n    /**\n     * Read a new message from a JSON value.\n     */\n    fromJson(json, options) {\n        return this.internalJsonRead(json, jsonReadOptions(options));\n    }\n    /**\n     * Read a new message from a JSON string.\n     * This is equivalent to `T.fromJson(JSON.parse(json))`.\n     */\n    fromJsonString(json, options) {\n        let value = JSON.parse(json);\n        return this.fromJson(value, options);\n    }\n    /**\n     * Write the message to canonical JSON value.\n     */\n    toJson(message, options) {\n        return this.internalJsonWrite(message, jsonWriteOptions(options));\n    }\n    /**\n     * Convert the message to canonical JSON string.\n     * This is equivalent to `JSON.stringify(T.toJson(t))`\n     */\n    toJsonString(message, options) {\n        var _a;\n        let value = this.toJson(message, options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Write the message to binary format.\n     */\n    toBinary(message, options) {\n        let opt = binaryWriteOptions(options);\n        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * JSON, use `fromJson()` or `fromJsonString()`.\n     *\n     * Reads JSON value and merges the fields into the target\n     * according to protobuf rules. If the target is omitted,\n     * a new instance is created first.\n     */\n    internalJsonRead(json, options, target) {\n        if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n            let message = target !== null && target !== void 0 ? target : this.create();\n            this.refJsonReader.read(json, message, options);\n            return message;\n        }\n        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * to JSON, use `toJson()` or `toJsonString().\n     *\n     * Writes JSON value and returns it.\n     */\n    internalJsonWrite(message, options) {\n        return this.refJsonWriter.write(message, options);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * in binary format, use `toBinary()`.\n     *\n     * Serializes the message in binary format and appends it to the given\n     * writer. Returns passed writer.\n     */\n    internalBinaryWrite(message, writer, options) {\n        this.refBinWriter.write(message, writer, options);\n        return writer;\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * binary data, use `fromBinary()`.\n     *\n     * Reads data from binary format and merges the fields into\n     * the target according to protobuf rules. If the target is\n     * omitted, a new instance is created first.\n     */\n    internalBinaryRead(reader, length, options, target) {\n        let message = target !== null && target !== void 0 ? target : this.create();\n        this.refBinReader.read(reader, message, options, length);\n        return message;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}