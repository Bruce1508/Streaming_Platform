{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/lib/mongoDB.ts"],"sourcesContent":["import { MongoClient } from \"mongodb\"\r\n\r\nif (!process.env.MONGODB_URL) {\r\n    throw new Error('Invalid/Missing environment variable: \"MONGODB_URL\"')\r\n}\r\n\r\nconst uri = process.env.MONGODB_URL\r\nconst options = {}\r\n\r\nlet client\r\nlet clientPromise: Promise<MongoClient>\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n    const globalWithMongo = global as typeof globalThis & {\r\n        _mongoClientPromise?: Promise<MongoClient>\r\n    }\r\n\r\n    if (!globalWithMongo._mongoClientPromise) {\r\n        client = new MongoClient(uri, options)\r\n        globalWithMongo._mongoClientPromise = client.connect()\r\n    }\r\n    clientPromise = globalWithMongo._mongoClientPromise\r\n} else {\r\n    client = new MongoClient(uri, options)\r\n    clientPromise = client.connect()\r\n}\r\n\r\nexport default clientPromise"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC1B,MAAM,IAAI,MAAM;AACpB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IACxC,MAAM,kBAAkB;IAIxB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACtC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACxD;IACA,gBAAgB,gBAAgB,mBAAmB;AACvD,OAAO;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\r\nimport GoogleProvider from \"next-auth/providers/google\"\r\nimport CredentialsProvider from \"next-auth/providers/credentials\"\r\nimport { MongoDBAdapter } from \"@auth/mongodb-adapter\"\r\nimport clientPromise from \"@/lib/mongoDB\"\r\nimport { NextAuthOptions } from \"next-auth\"\r\n\r\nconst authOptions: NextAuthOptions = {\r\n    adapter: MongoDBAdapter(clientPromise),\r\n    providers: [\r\n        // Google Provider\r\n        GoogleProvider({\r\n            clientId: process.env.GOOGLE_CLIENT_ID!,\r\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n        }),\r\n\r\n        // Credentials Provider cho login thông thường\r\n        CredentialsProvider({\r\n            name: \"credentials\",\r\n            credentials: {\r\n                email: { label: \"Email\", type: \"email\" },\r\n                password: { label: \"Password\", type: \"password\" }\r\n            },\r\n            async authorize(credentials) {\r\n                if (!credentials?.email || !credentials?.password) {\r\n                    return null\r\n                }\r\n\r\n                try {\r\n                    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/sign-in`, {\r\n                        method: \"POST\",\r\n                        headers: { \"Content-Type\": \"application/json\" },\r\n                        body: JSON.stringify({\r\n                            email: credentials.email,\r\n                            password: credentials.password\r\n                        })\r\n                    })\r\n\r\n                    const data = await response.json()\r\n\r\n                    if (data.success && data.user) {\r\n                        return {\r\n                            id: data.user._id,\r\n                            email: data.user.email,\r\n                            name: data.user.fullName,\r\n                            image: data.user.profilePic,\r\n                            ...data.user,\r\n                            accessToken: data.token\r\n                        }\r\n                    }\r\n                    return null\r\n                } catch (error) {\r\n                    console.error(\"Login error:\", error)\r\n                    return null\r\n                }\r\n            }\r\n        })\r\n    ],\r\n\r\n    session: {\r\n        strategy: \"jwt\",\r\n        maxAge: 7 * 24 * 60 * 60, // 7 days\r\n    },\r\n\r\n    pages: {\r\n        signIn: \"/sign-in\",\r\n        error: \"/sign-in\",\r\n    },\r\n\r\n    callbacks: {\r\n        async signIn({ user, account, profile }) {\r\n            if (account?.provider === \"google\") {\r\n                try {\r\n                    // Gọi API backend để create/update user\r\n                    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/oauth`, {\r\n                        method: \"POST\",\r\n                        headers: { \"Content-Type\": \"application/json\" },\r\n                        body: JSON.stringify({\r\n                            provider: \"google\",\r\n                            email: user.email,\r\n                            fullName: user.name,\r\n                            profilePic: user.image,\r\n                            providerId: account.providerAccountId\r\n                        })\r\n                    })\r\n\r\n                    const data = await response.json()\r\n\r\n                    if (data.success) {\r\n                        user.id = data.user._id\r\n                        user.accessToken = data.token\r\n                        return true\r\n                    }\r\n                    return false\r\n                } catch (error) {\r\n                    console.error(\"OAuth error:\", error)\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        },\r\n\r\n        async jwt({ token, user, account }) {\r\n            if (user) {\r\n                token.id = user.id\r\n                token.accessToken = user.accessToken\r\n                token.isOnboarded = user.isOnboarded\r\n            }\r\n            return token\r\n        },\r\n\r\n        async session({ session, token }) {\r\n            if (session.user) {\r\n                session.user.id = token.id as string\r\n                session.accessToken = token.accessToken as string\r\n                session.user.isOnboarded = token.isOnboarded as boolean\r\n            }\r\n            return session\r\n        },\r\n    },\r\n}\r\n\r\nconst handler = NextAuth(authOptions)\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":"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","debugId":null}}]
}