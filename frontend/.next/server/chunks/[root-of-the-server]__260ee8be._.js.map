{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/linguex/Streaming_Platform/frontend/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\r\nimport { NextAuthOptions } from \"next-auth\"\r\nimport GoogleProvider from \"next-auth/providers/google\"\r\nimport CredentialsProvider from \"next-auth/providers/credentials\"\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n    providers: [\r\n        GoogleProvider({\r\n            clientId: process.env.GOOGLE_CLIENT_ID!,\r\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n            authorization: {\r\n                params: {\r\n                    prompt: \"consent\",\r\n                    access_type: \"offline\",\r\n                    response_type: \"code\"\r\n                }\r\n            }\r\n        }),\r\n\r\n        CredentialsProvider({\r\n            name: \"credentials\",\r\n            credentials: {\r\n                email: { label: \"Email\", type: \"email\" },\r\n                password: { label: \"Password\", type: \"password\" }\r\n            },\r\n            async authorize(credentials) {\r\n                if (!credentials?.email || !credentials?.password) {\r\n                    return null\r\n                }\r\n\r\n                try {\r\n                    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/sign-in`, {\r\n                        method: \"POST\",\r\n                        headers: { \"Content-Type\": \"application/json\" },\r\n                        body: JSON.stringify({\r\n                            email: credentials.email,\r\n                            password: credentials.password\r\n                        })\r\n                    })\r\n\r\n                    const data = await response.json()\r\n\r\n                    if (data.success && data.user) {\r\n                        return {\r\n                            id: data.user._id,\r\n                            email: data.user.email,\r\n                            name: data.user.fullName,\r\n                            image: data.user.profilePic || \"\",\r\n                            isOnboarded: data.user.isOnboarded || false,\r\n                            bio: data.user.bio || \"\",\r\n                            nativeLanguage: data.user.nativeLanguage || \"\",\r\n                            learningLanguage: data.user.learningLanguage || \"\",\r\n                            location: data.user.location || \"\",\r\n                            accessToken: data.token // Ensure this is always defined\r\n                        }\r\n                    }\r\n                    return null\r\n                } catch (error) {\r\n                    console.error(\"Login error:\", error)\r\n                    return null\r\n                }\r\n            }\r\n        })\r\n    ],\r\n\r\n    debug: true,\r\n\r\n    session: {\r\n        strategy: \"jwt\",\r\n        maxAge: 30 * 24 * 60 * 60,\r\n        updateAge: 24 * 60 * 60\r\n    },\r\n\r\n    pages: {\r\n        signIn: \"/sign-in\",\r\n        error: \"/sign-in\",\r\n    },\r\n\r\n    callbacks: {\r\n        async signIn({ user, account, profile }) {\r\n            console.log(\"SignIn callback - user:\", user);\r\n\r\n            if (account?.provider === \"google\") {\r\n                try {\r\n                    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/oauth`, {\r\n                        method: \"POST\",\r\n                        headers: { \"Content-Type\": \"application/json\" },\r\n                        body: JSON.stringify({\r\n                            provider: \"google\",\r\n                            email: user.email,\r\n                            fullName: user.name,\r\n                            profilePic: user.image,\r\n                            providerId: account.providerAccountId\r\n                        })\r\n                    })\r\n\r\n                    const data = await response.json()\r\n                    console.log(\"OAuth API response:\", data);\r\n\r\n                    if (data.success) {\r\n                        user.id = data.user._id\r\n                        user.isOnboarded = data.user.isOnboarded || false\r\n                        user.bio = data.user.bio || \"\"\r\n                        user.nativeLanguage = data.user.nativeLanguage || \"\"\r\n                        user.learningLanguage = data.user.learningLanguage || \"\"\r\n                        user.location = data.user.location || \"\"\r\n                        user.accessToken = data.token // Ensure token is set\r\n                        return true\r\n                    }\r\n                    return false\r\n                } catch (error) {\r\n                    console.error(\"OAuth API error:\", error)\r\n                    return false\r\n                }\r\n            }\r\n\r\n            return true\r\n        },\r\n\r\n        async jwt({ token, user, account }) {\r\n            // Initial sign in\r\n            if (user) {\r\n                token.id = user.id\r\n                token.email = user.email\r\n                token.name = user.name\r\n                token.picture = user.image\r\n                token.isOnboarded = user.isOnboarded\r\n                token.bio = user.bio\r\n                token.nativeLanguage = user.nativeLanguage\r\n                token.learningLanguage = user.learningLanguage\r\n                token.location = user.location\r\n                // Use optional chaining and provide default empty string\r\n                token.accessToken = user.accessToken || \"\"\r\n                console.log(\"JWT callback - token:\", token);\r\n            }\r\n            return token\r\n        },\r\n\r\n        async session({ session, token }) {\r\n            console.log(\"Session callback - session:\", session);\r\n            if (session.user) {\r\n                session.user.id = token.id as string\r\n                session.user.email = token.email as string\r\n                session.user.name = token.name as string\r\n                session.user.image = token.picture as string\r\n                session.user.isOnboarded = token.isOnboarded as boolean\r\n                session.user.bio = token.bio as string\r\n                session.user.nativeLanguage = token.nativeLanguage as string\r\n                session.user.learningLanguage = token.learningLanguage as string\r\n                session.user.location = token.location as string\r\n            }\r\n            // Use optional chaining and provide default empty string\r\n            session.accessToken = token.accessToken || \"\"\r\n            return session\r\n        },\r\n\r\n        async redirect({ url, baseUrl }) {\r\n            if (url.startsWith(baseUrl)) return url\r\n            return baseUrl\r\n        }\r\n    }\r\n}\r\n\r\nconst handler = NextAuth(authOptions)\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":"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","debugId":null}}]
}