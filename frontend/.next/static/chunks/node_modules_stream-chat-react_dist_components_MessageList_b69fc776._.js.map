{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/utils.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nimport { isMessageEdited } from '../Message/utils';\nimport { isDate } from '../../i18n';\n/**\n * processMessages - Transform the input message list according to config parameters\n *\n * Inserts date separators btw. messages created on different dates or before unread incoming messages. By default:\n * - enabled in main message list\n * - disabled in virtualized message list\n * - disabled in thread\n *\n * Allows to filter out deleted messages, contolled by hideDeletedMessages param. This is disabled by default.\n *\n * Sets Giphy preview message for VirtualizedMessageList\n *\n * The only required params are messages and userId, the rest are config params:\n *\n * @return {LocalMessage[]} Transformed list of messages\n */\nexport const processMessages = (params) => {\n    const { messages, reviewProcessedMessage, setGiphyPreviewMessage, ...context } = params;\n    const { enableDateSeparator, hideDeletedMessages, hideNewMessageSeparator, lastRead, userId, } = context;\n    let unread = false;\n    let ephemeralMessagePresent = false;\n    let lastDateSeparator;\n    const newMessages = [];\n    for (let i = 0; i < messages.length; i += 1) {\n        const message = messages[i];\n        if (hideDeletedMessages && message.type === 'deleted') {\n            continue;\n        }\n        if (setGiphyPreviewMessage &&\n            message.type === 'ephemeral' &&\n            message.command === 'giphy') {\n            ephemeralMessagePresent = true;\n            setGiphyPreviewMessage(message);\n            continue;\n        }\n        const changes = [];\n        const messageDate = (message.created_at &&\n            isDate(message.created_at) &&\n            message.created_at.toDateString()) ||\n            '';\n        const previousMessage = messages[i - 1];\n        let prevMessageDate = messageDate;\n        if (enableDateSeparator &&\n            previousMessage?.created_at &&\n            isDate(previousMessage.created_at)) {\n            prevMessageDate = previousMessage.created_at.toDateString();\n        }\n        if (!unread && !hideNewMessageSeparator) {\n            unread =\n                (lastRead && message.created_at && new Date(lastRead) < message.created_at) ||\n                    false;\n            // do not show date separator for current user's messages\n            if (enableDateSeparator && unread && message.user?.id !== userId) {\n                changes.push({\n                    customType: CUSTOM_MESSAGE_TYPE.date,\n                    date: message.created_at,\n                    id: makeDateMessageId(message.created_at),\n                    unread,\n                });\n            }\n        }\n        if (enableDateSeparator &&\n            (i === 0 || // always put date separator before the first message\n                messageDate !== prevMessageDate || // add date separator btw. 2 messages created on different date\n                // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date\n                (hideDeletedMessages &&\n                    previousMessage?.type === 'deleted' &&\n                    lastDateSeparator !== messageDate)) &&\n            !isDateSeparatorMessage(changes[changes.length - 1]) // do not show two date separators in a row)\n        ) {\n            lastDateSeparator = messageDate;\n            changes.push({\n                customType: CUSTOM_MESSAGE_TYPE.date,\n                date: message.created_at,\n                id: makeDateMessageId(message.created_at),\n            }, message);\n        }\n        else {\n            changes.push(message);\n        }\n        newMessages.push(...(reviewProcessedMessage?.({\n            changes,\n            context,\n            index: i,\n            messages,\n            processedMessages: newMessages,\n        }) || changes));\n    }\n    // clean up the giphy preview component state after a Cancel action\n    if (setGiphyPreviewMessage && !ephemeralMessagePresent) {\n        setGiphyPreviewMessage(undefined);\n    }\n    return newMessages;\n};\nexport const makeIntroMessage = () => ({\n    customType: CUSTOM_MESSAGE_TYPE.intro,\n    id: nanoid(),\n});\nexport const makeDateMessageId = (date) => {\n    let idSuffix;\n    try {\n        idSuffix = !date ? nanoid() : date instanceof Date ? date.toISOString() : date;\n    }\n    catch (e) {\n        idSuffix = nanoid();\n    }\n    return `${CUSTOM_MESSAGE_TYPE.date}-${idSuffix}`;\n};\n// fast since it usually iterates just the last few messages\nexport const getLastReceived = (messages) => {\n    for (let i = messages.length - 1; i > 0; i -= 1) {\n        if (messages[i].status === 'received') {\n            return messages[i].id;\n        }\n    }\n    return null;\n};\nexport const getReadStates = (messages, read = {}, returnAllReadData) => {\n    // create object with empty array for each message id\n    const readData = {};\n    Object.values(read).forEach((readState) => {\n        if (!readState.last_read)\n            return;\n        let userLastReadMsgId;\n        // loop messages sent by current user and add read data for other users in channel\n        messages.forEach((msg) => {\n            if (msg.created_at && msg.created_at < readState.last_read) {\n                userLastReadMsgId = msg.id;\n                // if true, save other user's read data for all messages they've read\n                if (returnAllReadData) {\n                    if (!readData[userLastReadMsgId]) {\n                        readData[userLastReadMsgId] = [];\n                    }\n                    readData[userLastReadMsgId].push(readState.user);\n                }\n            }\n        });\n        // if true, only save read data for other user's last read message\n        if (userLastReadMsgId && !returnAllReadData) {\n            if (!readData[userLastReadMsgId]) {\n                readData[userLastReadMsgId] = [];\n            }\n            readData[userLastReadMsgId].push(readState.user);\n        }\n    });\n    return readData;\n};\nexport const insertIntro = (messages, headerPosition) => {\n    const newMessages = messages;\n    const intro = makeIntroMessage();\n    // if no headerPosition is set, HeaderComponent will go at the top\n    if (!headerPosition) {\n        newMessages.unshift(intro);\n        return newMessages;\n    }\n    // if no messages, intro gets inserted\n    if (!newMessages.length) {\n        newMessages.unshift(intro);\n        return newMessages;\n    }\n    // else loop over the messages\n    for (let i = 0; i < messages.length; i += 1) {\n        const messageTime = isDate(messages[i].created_at)\n            ? messages[i].created_at.getTime()\n            : null;\n        const nextMessageTime = isDate(messages[i + 1].created_at)\n            ? messages[i + 1].created_at.getTime()\n            : null;\n        // header position is smaller than message time so comes after;\n        if (messageTime && messageTime < headerPosition) {\n            // if header position is also smaller than message time continue;\n            if (nextMessageTime && nextMessageTime < headerPosition) {\n                if (messages[i + 1] && isDateSeparatorMessage(messages[i + 1]))\n                    continue;\n                if (!nextMessageTime) {\n                    newMessages.push(intro);\n                    return newMessages;\n                }\n            }\n            else {\n                newMessages.splice(i + 1, 0, intro);\n                return newMessages;\n            }\n        }\n    }\n    return newMessages;\n};\nexport const getGroupStyles = (message, previousMessage, nextMessage, noGroupByUser, maxTimeBetweenGroupedMessages) => {\n    if (isDateSeparatorMessage(message) || isIntroMessage(message))\n        return '';\n    if (noGroupByUser || message.attachments?.length !== 0)\n        return 'single';\n    const isTopMessage = !previousMessage ||\n        isIntroMessage(previousMessage) ||\n        isDateSeparatorMessage(previousMessage) ||\n        previousMessage.type === 'system' ||\n        previousMessage.type === 'error' ||\n        previousMessage.attachments?.length !== 0 ||\n        message.user?.id !== previousMessage.user?.id ||\n        previousMessage.deleted_at ||\n        (message.reaction_groups && Object.keys(message.reaction_groups).length > 0) ||\n        isMessageEdited(previousMessage) ||\n        (maxTimeBetweenGroupedMessages !== undefined &&\n            previousMessage.created_at &&\n            message.created_at &&\n            new Date(message.created_at).getTime() -\n                new Date(previousMessage.created_at).getTime() >\n                maxTimeBetweenGroupedMessages);\n    const isBottomMessage = !nextMessage ||\n        isIntroMessage(nextMessage) ||\n        isDateSeparatorMessage(nextMessage) ||\n        nextMessage.type === 'system' ||\n        nextMessage.type === 'error' ||\n        nextMessage.attachments?.length !== 0 ||\n        message.user?.id !== nextMessage.user?.id ||\n        nextMessage.deleted_at ||\n        (nextMessage.reaction_groups &&\n            Object.keys(nextMessage.reaction_groups).length > 0) ||\n        isMessageEdited(message) ||\n        (maxTimeBetweenGroupedMessages !== undefined &&\n            nextMessage.created_at &&\n            message.created_at &&\n            new Date(nextMessage.created_at).getTime() -\n                new Date(message.created_at).getTime() >\n                maxTimeBetweenGroupedMessages);\n    if (!isTopMessage && !isBottomMessage) {\n        if (message.deleted_at || message.type === 'error')\n            return 'single';\n        return 'middle';\n    }\n    if (isBottomMessage) {\n        if (isTopMessage || message.deleted_at || message.type === 'error')\n            return 'single';\n        return 'bottom';\n    }\n    if (isTopMessage)\n        return 'top';\n    return '';\n};\n// \"Probably\" included, because it may happen that the last page was returned and it has exactly the size of the limit\n// but the back-end cannot provide us with information on whether it has still more messages in the DB\n// FIXME: once the pagination state is moved from Channel to MessageList, these should be moved as well.\n//  The MessageList should have configurable the limit for performing the requests.\n//  This parameter would then be used within these functions\nexport const hasMoreMessagesProbably = (returnedCountMessages, limit) => returnedCountMessages >= limit;\n// @deprecated\nexport const hasNotMoreMessages = (returnedCountMessages, limit) => returnedCountMessages < limit;\nexport function isIntroMessage(message) {\n    return message.customType === CUSTOM_MESSAGE_TYPE.intro;\n}\nexport function isDateSeparatorMessage(message) {\n    return (message !== null &&\n        typeof message === 'object' &&\n        message.customType === CUSTOM_MESSAGE_TYPE.date &&\n        isDate(message.date));\n}\nexport function isLocalMessage(message) {\n    return !isDateSeparatorMessage(message) && !isIntroMessage(message);\n}\nexport const getIsFirstUnreadMessage = ({ firstUnreadMessageId, isFirstMessage, lastReadDate, lastReadMessageId, message, previousMessage, unreadMessageCount = 0, }) => {\n    // prevent showing unread indicator in threads\n    if (message.parent_id)\n        return false;\n    const createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();\n    const lastReadTimestamp = lastReadDate?.getTime();\n    const messageIsUnread = !!createdAtTimestamp && !!lastReadTimestamp && createdAtTimestamp > lastReadTimestamp;\n    const previousMessageIsLastRead = !!lastReadMessageId && lastReadMessageId === previousMessage?.id;\n    return (firstUnreadMessageId === message.id ||\n        (!!unreadMessageCount &&\n            messageIsUnread &&\n            (isFirstMessage || previousMessageIsLastRead)));\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useEnrichedMessages.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { getGroupStyles, insertIntro, processMessages } from '../../utils';\nimport { useChatContext } from '../../../../context/ChatContext';\nimport { useComponentContext } from '../../../../context/ComponentContext';\nexport const useEnrichedMessages = (args) => {\n    const { channel, disableDateSeparator, groupStyles, headerPosition, hideDeletedMessages, hideNewMessageSeparator, maxTimeBetweenGroupedMessages, messages, noGroupByUser, reviewProcessedMessage, } = args;\n    const { client } = useChatContext('useEnrichedMessages');\n    const { HeaderComponent } = useComponentContext('useEnrichedMessages');\n    const lastRead = useMemo(() => channel.lastRead?.(), [channel]);\n    const enableDateSeparator = !disableDateSeparator;\n    let messagesWithDates = !enableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator\n        ? messages\n        : processMessages({\n            enableDateSeparator,\n            hideDeletedMessages,\n            hideNewMessageSeparator,\n            lastRead,\n            messages,\n            reviewProcessedMessage,\n            userId: client.userID || '',\n        });\n    if (HeaderComponent) {\n        messagesWithDates = insertIntro(messagesWithDates, headerPosition);\n    }\n    const groupStylesFn = groupStyles || getGroupStyles;\n    const messageGroupStyles = useMemo(() => messagesWithDates.reduce((acc, message, i) => {\n        const style = groupStylesFn(message, messagesWithDates[i - 1], messagesWithDates[i + 1], noGroupByUser, maxTimeBetweenGroupedMessages);\n        if (style)\n            acc[message.id] = style;\n        return acc;\n    }, {}), \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [maxTimeBetweenGroupedMessages, messagesWithDates, noGroupByUser]);\n    return { messageGroupStyles, messages: messagesWithDates };\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACO,MAAM,sBAAsB,CAAC;IAChC,MAAM,EAAE,OAAO,EAAE,oBAAoB,EAAE,WAAW,EAAE,cAAc,EAAE,mBAAmB,EAAE,uBAAuB,EAAE,6BAA6B,EAAE,QAAQ,EAAE,aAAa,EAAE,sBAAsB,EAAG,GAAG;IACtM,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,MAAM,EAAE,eAAe,EAAE,GAAG,CAAA,GAAA,iLAAA,CAAA,sBAAmB,AAAD,EAAE;IAChD,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;iDAAE,IAAM,QAAQ,QAAQ;gDAAM;QAAC;KAAQ;IAC9D,MAAM,sBAAsB,CAAC;IAC7B,IAAI,oBAAoB,CAAC,uBAAuB,CAAC,uBAAuB,0BAClE,WACA,CAAA,GAAA,wLAAA,CAAA,kBAAe,AAAD,EAAE;QACd;QACA;QACA;QACA;QACA;QACA;QACA,QAAQ,OAAO,MAAM,IAAI;IAC7B;IACJ,IAAI,iBAAiB;QACjB,oBAAoB,CAAA,GAAA,wLAAA,CAAA,cAAW,AAAD,EAAE,mBAAmB;IACvD;IACA,MAAM,gBAAgB,eAAe,wLAAA,CAAA,iBAAc;IACnD,MAAM,qBAAqB,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;2DAAE,IAAM,kBAAkB,MAAM;mEAAC,CAAC,KAAK,SAAS;oBAC7E,MAAM,QAAQ,cAAc,SAAS,iBAAiB,CAAC,IAAI,EAAE,EAAE,iBAAiB,CAAC,IAAI,EAAE,EAAE,eAAe;oBACxG,IAAI,OACA,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG;oBACtB,OAAO;gBACX;kEAAG,CAAC;0DACJ,uDAAuD;IACvD;QAAC;QAA+B;QAAmB;KAAc;IACjE,OAAO;QAAE;QAAoB,UAAU;IAAkB;AAC7D","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/useLastReadData.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { isLocalMessage } from '../utils';\nimport { getReadStates } from '../utils';\nexport const useLastReadData = (props) => {\n    const { messages, read, returnAllReadData, userID } = props;\n    return useMemo(() => {\n        const ownLocalMessages = messages.filter((msg) => isLocalMessage(msg) && msg.user?.id === userID);\n        return getReadStates(ownLocalMessages, read, returnAllReadData);\n    }, [messages, read, returnAllReadData, userID]);\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;;AAEO,MAAM,kBAAkB,CAAC;IAC5B,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,GAAG;IACtD,OAAO,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;mCAAE;YACX,MAAM,mBAAmB,SAAS,MAAM;4DAAC,CAAC,MAAQ,CAAA,GAAA,wLAAA,CAAA,iBAAc,AAAD,EAAE,QAAQ,IAAI,IAAI,EAAE,OAAO;;YAC1F,OAAO,CAAA,GAAA,wLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,MAAM;QACjD;kCAAG;QAAC;QAAU;QAAM;QAAmB;KAAO;AAClD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { useLastReadData } from '../useLastReadData';\nimport { getLastReceived } from '../../utils';\nimport { useChatContext } from '../../../../context/ChatContext';\nimport { useComponentContext } from '../../../../context/ComponentContext';\nexport const useMessageListElements = (props) => {\n    const { channelUnreadUiState, enrichedMessages, internalMessageProps, messageGroupStyles, read, renderMessages, returnAllReadData, threadList, } = props;\n    const { client, customClasses } = useChatContext('useMessageListElements');\n    const components = useComponentContext('useMessageListElements');\n    // get the readData, but only for messages submitted by the user themselves\n    const readData = useLastReadData({\n        messages: enrichedMessages,\n        read,\n        returnAllReadData,\n        userID: client.userID,\n    });\n    const lastReceivedMessageId = useMemo(() => getLastReceived(enrichedMessages), [enrichedMessages]);\n    const elements = useMemo(() => renderMessages({\n        channelUnreadUiState,\n        components,\n        customClasses,\n        lastReceivedMessageId,\n        messageGroupStyles,\n        messages: enrichedMessages,\n        readData,\n        sharedMessageProps: { ...internalMessageProps, threadList },\n    }), \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        enrichedMessages,\n        internalMessageProps,\n        lastReceivedMessageId,\n        messageGroupStyles,\n        channelUnreadUiState,\n        readData,\n        renderMessages,\n        threadList,\n    ]);\n    return elements;\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AACO,MAAM,yBAAyB,CAAC;IACnC,MAAM,EAAE,oBAAoB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,IAAI,EAAE,cAAc,EAAE,iBAAiB,EAAE,UAAU,EAAG,GAAG;IACnJ,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;IACjD,MAAM,aAAa,CAAA,GAAA,iLAAA,CAAA,sBAAmB,AAAD,EAAE;IACvC,2EAA2E;IAC3E,MAAM,WAAW,CAAA,GAAA,2MAAA,CAAA,kBAAe,AAAD,EAAE;QAC7B,UAAU;QACV;QACA;QACA,QAAQ,OAAO,MAAM;IACzB;IACA,MAAM,wBAAwB,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;iEAAE,IAAM,CAAA,GAAA,wLAAA,CAAA,kBAAe,AAAD,EAAE;gEAAmB;QAAC;KAAiB;IACjG,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;oDAAE,IAAM,eAAe;gBAC1C;gBACA;gBACA;gBACA;gBACA;gBACA,UAAU;gBACV;gBACA,oBAAoB;oBAAE,GAAG,oBAAoB;oBAAE;gBAAW;YAC9D;mDACA,uDAAuD;IACvD;QACI;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACH;IACD,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListScrollManager.js"],"sourcesContent":["import { useLayoutEffect, useRef } from 'react';\nimport { useChatContext } from '../../../../context/ChatContext';\n// FIXME: change this generic name to something like useAdjustScrollPositionToListSize\nexport function useMessageListScrollManager(params) {\n    const { loadMoreScrollThreshold, onScrollBy, scrollContainerMeasures, scrolledUpThreshold, scrollToBottom, showNewMessages, } = params;\n    const { client } = useChatContext('useMessageListScrollManager');\n    const measures = useRef({\n        offsetHeight: 0,\n        scrollHeight: 0,\n    });\n    const messages = useRef(undefined);\n    const scrollTop = useRef(0);\n    useLayoutEffect(() => {\n        const prevMeasures = measures.current;\n        const prevMessages = messages.current;\n        const newMessages = params.messages;\n        const lastNewMessage = newMessages[newMessages.length - 1] || {};\n        const lastPrevMessage = prevMessages?.[prevMessages.length - 1];\n        const newMeasures = scrollContainerMeasures();\n        const wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current <\n            scrolledUpThreshold;\n        if (typeof prevMessages !== 'undefined') {\n            if (prevMessages.length < newMessages.length) {\n                // messages added to the top\n                if (lastPrevMessage?.id === lastNewMessage.id) {\n                    if (scrollTop.current < loadMoreScrollThreshold) {\n                        const listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;\n                        onScrollBy(listHeightDelta);\n                    }\n                }\n                // messages added to the bottom\n                else {\n                    const lastMessageIsFromCurrentUser = lastNewMessage.user?.id === client.userID;\n                    if (lastMessageIsFromCurrentUser || wasAtBottom) {\n                        scrollToBottom();\n                    }\n                    else {\n                        showNewMessages();\n                    }\n                }\n            }\n            // message list length didn't change, but check if last message had reaction/reply update\n            else {\n                const hasNewReactions = lastPrevMessage?.latest_reactions?.length !==\n                    lastNewMessage.latest_reactions?.length;\n                const hasNewReplies = lastPrevMessage?.reply_count !== lastNewMessage.reply_count;\n                if ((hasNewReactions || hasNewReplies) && wasAtBottom) {\n                    scrollToBottom();\n                }\n            }\n        }\n        messages.current = newMessages;\n        measures.current = newMeasures;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [measures, messages, params.messages]);\n    return (scrollTopValue) => {\n        scrollTop.current = scrollTopValue;\n    };\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,4BAA4B,MAAM;IAC9C,MAAM,EAAE,uBAAuB,EAAE,UAAU,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,cAAc,EAAE,eAAe,EAAG,GAAG;IAChI,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;QACpB,cAAc;QACd,cAAc;IAClB;IACA,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACxB,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACzB,CAAA,GAAA,6JAAA,CAAA,kBAAe,AAAD;uDAAE;YACZ,MAAM,eAAe,SAAS,OAAO;YACrC,MAAM,eAAe,SAAS,OAAO;YACrC,MAAM,cAAc,OAAO,QAAQ;YACnC,MAAM,iBAAiB,WAAW,CAAC,YAAY,MAAM,GAAG,EAAE,IAAI,CAAC;YAC/D,MAAM,kBAAkB,cAAc,CAAC,aAAa,MAAM,GAAG,EAAE;YAC/D,MAAM,cAAc;YACpB,MAAM,cAAc,aAAa,YAAY,GAAG,aAAa,YAAY,GAAG,UAAU,OAAO,GACzF;YACJ,IAAI,OAAO,iBAAiB,aAAa;gBACrC,IAAI,aAAa,MAAM,GAAG,YAAY,MAAM,EAAE;oBAC1C,4BAA4B;oBAC5B,IAAI,iBAAiB,OAAO,eAAe,EAAE,EAAE;wBAC3C,IAAI,UAAU,OAAO,GAAG,yBAAyB;4BAC7C,MAAM,kBAAkB,YAAY,YAAY,GAAG,aAAa,YAAY;4BAC5E,WAAW;wBACf;oBACJ,OAEK;wBACD,MAAM,+BAA+B,eAAe,IAAI,EAAE,OAAO,OAAO,MAAM;wBAC9E,IAAI,gCAAgC,aAAa;4BAC7C;wBACJ,OACK;4BACD;wBACJ;oBACJ;gBACJ,OAEK;oBACD,MAAM,kBAAkB,iBAAiB,kBAAkB,WACvD,eAAe,gBAAgB,EAAE;oBACrC,MAAM,gBAAgB,iBAAiB,gBAAgB,eAAe,WAAW;oBACjF,IAAI,CAAC,mBAAmB,aAAa,KAAK,aAAa;wBACnD;oBACJ;gBACJ;YACJ;YACA,SAAS,OAAO,GAAG;YACnB,SAAS,OAAO,GAAG;QACnB,uDAAuD;QAC3D;sDAAG;QAAC;QAAU;QAAU,OAAO,QAAQ;KAAC;IACxC,OAAO,CAAC;QACJ,UAAU,OAAO,GAAG;IACxB;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useScrollLocationLogic.js"],"sourcesContent":["import { useCallback, useLayoutEffect, useRef, useState } from 'react';\nimport { useMessageListScrollManager } from './useMessageListScrollManager';\nexport const useScrollLocationLogic = (params) => {\n    const { hasMoreNewer, listElement, loadMoreScrollThreshold, messages = [], scrolledUpThreshold = 200, suppressAutoscroll, } = params;\n    const [hasNewMessages, setHasNewMessages] = useState(false);\n    const [wrapperRect, setWrapperRect] = useState();\n    const [isMessageListScrolledToBottom, setIsMessageListScrolledToBottom] = useState(true);\n    const closeToBottom = useRef(false);\n    const closeToTop = useRef(false);\n    const scrollToBottom = useCallback(() => {\n        if (!listElement?.scrollTo || hasMoreNewer || suppressAutoscroll) {\n            return;\n        }\n        listElement.scrollTo({\n            top: listElement.scrollHeight,\n        });\n        setHasNewMessages(false);\n    }, [listElement, hasMoreNewer, suppressAutoscroll]);\n    useLayoutEffect(() => {\n        if (listElement) {\n            setWrapperRect(listElement.getBoundingClientRect());\n            scrollToBottom();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [listElement, hasMoreNewer]);\n    const updateScrollTop = useMessageListScrollManager({\n        loadMoreScrollThreshold,\n        messages,\n        onScrollBy: (scrollBy) => {\n            listElement?.scrollBy({ top: scrollBy });\n        },\n        scrollContainerMeasures: () => ({\n            offsetHeight: listElement?.offsetHeight || 0,\n            scrollHeight: listElement?.scrollHeight || 0,\n        }),\n        scrolledUpThreshold,\n        scrollToBottom,\n        showNewMessages: () => setHasNewMessages(true),\n    });\n    const onScroll = useCallback((event) => {\n        const element = event.target;\n        const scrollTop = element.scrollTop;\n        updateScrollTop(scrollTop);\n        const offsetHeight = element.offsetHeight;\n        const scrollHeight = element.scrollHeight;\n        const prevCloseToBottom = closeToBottom.current;\n        closeToBottom.current =\n            scrollHeight - (scrollTop + offsetHeight) < scrolledUpThreshold;\n        closeToTop.current = scrollTop < scrolledUpThreshold;\n        if (closeToBottom.current) {\n            setHasNewMessages(false);\n        }\n        if (prevCloseToBottom && !closeToBottom.current) {\n            setIsMessageListScrolledToBottom(false);\n        }\n        else if (!prevCloseToBottom && closeToBottom.current) {\n            setIsMessageListScrolledToBottom(true);\n        }\n    }, [updateScrollTop, closeToTop, closeToBottom, scrolledUpThreshold]);\n    return {\n        hasNewMessages,\n        isMessageListScrolledToBottom,\n        onScroll,\n        scrollToBottom,\n        wrapperRect,\n    };\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACO,MAAM,yBAAyB,CAAC;IACnC,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,uBAAuB,EAAE,WAAW,EAAE,EAAE,sBAAsB,GAAG,EAAE,kBAAkB,EAAG,GAAG;IAC9H,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;IAC7C,MAAM,CAAC,+BAA+B,iCAAiC,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnF,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAC7B,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAC1B,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;8DAAE;YAC/B,IAAI,CAAC,aAAa,YAAY,gBAAgB,oBAAoB;gBAC9D;YACJ;YACA,YAAY,QAAQ,CAAC;gBACjB,KAAK,YAAY,YAAY;YACjC;YACA,kBAAkB;QACtB;6DAAG;QAAC;QAAa;QAAc;KAAmB;IAClD,CAAA,GAAA,6JAAA,CAAA,kBAAe,AAAD;kDAAE;YACZ,IAAI,aAAa;gBACb,eAAe,YAAY,qBAAqB;gBAChD;YACJ;QACA,uDAAuD;QAC3D;iDAAG;QAAC;QAAa;KAAa;IAC9B,MAAM,kBAAkB,CAAA,GAAA,sOAAA,CAAA,8BAA2B,AAAD,EAAE;QAChD;QACA;QACA,UAAU;mFAAE,CAAC;gBACT,aAAa,SAAS;oBAAE,KAAK;gBAAS;YAC1C;;QACA,uBAAuB;mFAAE,IAAM,CAAC;oBAC5B,cAAc,aAAa,gBAAgB;oBAC3C,cAAc,aAAa,gBAAgB;gBAC/C,CAAC;;QACD;QACA;QACA,eAAe;mFAAE,IAAM,kBAAkB;;IAC7C;IACA,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;wDAAE,CAAC;YAC1B,MAAM,UAAU,MAAM,MAAM;YAC5B,MAAM,YAAY,QAAQ,SAAS;YACnC,gBAAgB;YAChB,MAAM,eAAe,QAAQ,YAAY;YACzC,MAAM,eAAe,QAAQ,YAAY;YACzC,MAAM,oBAAoB,cAAc,OAAO;YAC/C,cAAc,OAAO,GACjB,eAAe,CAAC,YAAY,YAAY,IAAI;YAChD,WAAW,OAAO,GAAG,YAAY;YACjC,IAAI,cAAc,OAAO,EAAE;gBACvB,kBAAkB;YACtB;YACA,IAAI,qBAAqB,CAAC,cAAc,OAAO,EAAE;gBAC7C,iCAAiC;YACrC,OACK,IAAI,CAAC,qBAAqB,cAAc,OAAO,EAAE;gBAClD,iCAAiC;YACrC;QACJ;uDAAG;QAAC;QAAiB;QAAY;QAAe;KAAoB;IACpE,OAAO;QACH;QACA;QACA;QACA;QACA;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/MessageListMainPanel.js"],"sourcesContent":["import React from 'react';\nexport const MESSAGE_LIST_MAIN_PANEL_CLASS = 'str-chat__main-panel-inner str-chat__message-list-main-panel';\nexport const MessageListMainPanel = ({ children }) => (React.createElement(\"div\", { className: MESSAGE_LIST_MAIN_PANEL_CLASS }, children));\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,gCAAgC;AACtC,MAAM,uBAAuB,CAAC,EAAE,QAAQ,EAAE,GAAM,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,WAAW;IAA8B,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesSeparator.js"],"sourcesContent":["import React from 'react';\nimport { useTranslationContext } from '../../context';\nexport const UNREAD_MESSAGE_SEPARATOR_CLASS = 'str-chat__unread-messages-separator';\nexport const UnreadMessagesSeparator = ({ showCount, unreadCount, }) => {\n    const { t } = useTranslationContext('UnreadMessagesSeparator');\n    return (React.createElement(\"div\", { className: UNREAD_MESSAGE_SEPARATOR_CLASS, \"data-testid\": 'unread-messages-separator' }, unreadCount && showCount\n        ? t('unreadMessagesSeparatorText', { count: unreadCount })\n        : t('Unread messages')));\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACO,MAAM,iCAAiC;AACvC,MAAM,0BAA0B,CAAC,EAAE,SAAS,EAAE,WAAW,EAAG;IAC/D,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,mLAAA,CAAA,wBAAqB,AAAD,EAAE;IACpC,OAAQ,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,WAAW;QAAgC,eAAe;IAA4B,GAAG,eAAe,YACvI,EAAE,+BAA+B;QAAE,OAAO;IAAY,KACtD,EAAE;AACZ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.js"],"sourcesContent":["import { useChannelStateContext } from '../../../../context';\nimport { useEffect, useRef, useState } from 'react';\nimport { MESSAGE_LIST_MAIN_PANEL_CLASS } from '../../MessageListMainPanel';\nimport { UNREAD_MESSAGE_SEPARATOR_CLASS } from '../../UnreadMessagesSeparator';\nconst targetScrolledAboveVisibleContainerArea = (element) => {\n    const { bottom: targetBottom } = element.getBoundingClientRect();\n    return targetBottom < 0;\n};\nconst targetScrolledBelowVisibleContainerArea = (element, container) => {\n    const { top: targetTop } = element.getBoundingClientRect();\n    const { top: containerBottom } = container.getBoundingClientRect();\n    return targetTop > containerBottom;\n};\nexport const useUnreadMessagesNotification = ({ isMessageListScrolledToBottom, showAlways, unreadCount, }) => {\n    const { messages } = useChannelStateContext('UnreadMessagesNotification');\n    const [show, setShow] = useState(false);\n    const isScrolledAboveTargetTop = useRef(false);\n    const intersectionObserverIsSupported = typeof IntersectionObserver !== 'undefined';\n    useEffect(() => {\n        if (!(unreadCount && intersectionObserverIsSupported)) {\n            setShow(false);\n            return;\n        }\n        const [msgListPanel] = document.getElementsByClassName(MESSAGE_LIST_MAIN_PANEL_CLASS);\n        if (!msgListPanel)\n            return;\n        const [observedTarget] = document.getElementsByClassName(UNREAD_MESSAGE_SEPARATOR_CLASS);\n        if (!observedTarget) {\n            setShow(true);\n            return;\n        }\n        const scrolledBelowSeparator = targetScrolledAboveVisibleContainerArea(observedTarget);\n        const scrolledAboveSeparator = targetScrolledBelowVisibleContainerArea(observedTarget, msgListPanel);\n        setShow(showAlways\n            ? scrolledBelowSeparator || scrolledAboveSeparator\n            : scrolledBelowSeparator);\n        const observer = new IntersectionObserver((elements) => {\n            if (!elements.length)\n                return;\n            const { boundingClientRect, isIntersecting } = elements[0];\n            if (isIntersecting) {\n                setShow(false);\n                return;\n            }\n            const separatorIsAboveContainerTop = boundingClientRect.bottom < 0;\n            setShow(showAlways || separatorIsAboveContainerTop);\n            isScrolledAboveTargetTop.current = separatorIsAboveContainerTop;\n        }, { root: msgListPanel });\n        observer.observe(observedTarget);\n        return () => {\n            observer.disconnect();\n        };\n    }, [\n        intersectionObserverIsSupported,\n        isMessageListScrolledToBottom,\n        messages,\n        showAlways,\n        unreadCount,\n    ]);\n    useEffect(() => {\n        /**\n         * Handle situation when scrollToBottom is called from another component when the msg list is scrolled above the observed target (unread separator).\n         * The intersection observer is not triggered when Element.scrollTo() is called. So we end up in a situation when we are scrolled to the bottom\n         * and at the same time scrolled above the observed target.\n         */\n        if (unreadCount &&\n            isMessageListScrolledToBottom &&\n            isScrolledAboveTargetTop.current) {\n            setShow(true);\n            isScrolledAboveTargetTop.current = false;\n        }\n    }, [isMessageListScrolledToBottom, unreadCount]);\n    return { show: show && intersectionObserverIsSupported };\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,MAAM,0CAA0C,CAAC;IAC7C,MAAM,EAAE,QAAQ,YAAY,EAAE,GAAG,QAAQ,qBAAqB;IAC9D,OAAO,eAAe;AAC1B;AACA,MAAM,0CAA0C,CAAC,SAAS;IACtD,MAAM,EAAE,KAAK,SAAS,EAAE,GAAG,QAAQ,qBAAqB;IACxD,MAAM,EAAE,KAAK,eAAe,EAAE,GAAG,UAAU,qBAAqB;IAChE,OAAO,YAAY;AACvB;AACO,MAAM,gCAAgC,CAAC,EAAE,6BAA6B,EAAE,UAAU,EAAE,WAAW,EAAG;IACrG,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,oLAAA,CAAA,yBAAsB,AAAD,EAAE;IAC5C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,2BAA2B,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACxC,MAAM,kCAAkC,OAAO,yBAAyB;IACxE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mDAAE;YACN,IAAI,CAAC,CAAC,eAAe,+BAA+B,GAAG;gBACnD,QAAQ;gBACR;YACJ;YACA,MAAM,CAAC,aAAa,GAAG,SAAS,sBAAsB,CAAC,uMAAA,CAAA,gCAA6B;YACpF,IAAI,CAAC,cACD;YACJ,MAAM,CAAC,eAAe,GAAG,SAAS,sBAAsB,CAAC,0MAAA,CAAA,iCAA8B;YACvF,IAAI,CAAC,gBAAgB;gBACjB,QAAQ;gBACR;YACJ;YACA,MAAM,yBAAyB,wCAAwC;YACvE,MAAM,yBAAyB,wCAAwC,gBAAgB;YACvF,QAAQ,aACF,0BAA0B,yBAC1B;YACN,MAAM,WAAW,IAAI;2DAAqB,CAAC;oBACvC,IAAI,CAAC,SAAS,MAAM,EAChB;oBACJ,MAAM,EAAE,kBAAkB,EAAE,cAAc,EAAE,GAAG,QAAQ,CAAC,EAAE;oBAC1D,IAAI,gBAAgB;wBAChB,QAAQ;wBACR;oBACJ;oBACA,MAAM,+BAA+B,mBAAmB,MAAM,GAAG;oBACjE,QAAQ,cAAc;oBACtB,yBAAyB,OAAO,GAAG;gBACvC;0DAAG;gBAAE,MAAM;YAAa;YACxB,SAAS,OAAO,CAAC;YACjB;2DAAO;oBACH,SAAS,UAAU;gBACvB;;QACJ;kDAAG;QACC;QACA;QACA;QACA;QACA;KACH;IACD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mDAAE;YACN;;;;SAIC,GACD,IAAI,eACA,iCACA,yBAAyB,OAAO,EAAE;gBAClC,QAAQ;gBACR,yBAAyB,OAAO,GAAG;YACvC;QACJ;kDAAG;QAAC;QAA+B;KAAY;IAC/C,OAAO;QAAE,MAAM,QAAQ;IAAgC;AAC3D","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/useMarkRead.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, } from '../../../context';\nconst hasReadLastMessage = (channel, userId) => {\n    const latestMessageIdInChannel = channel.state.latestMessages.slice(-1)[0]?.id;\n    const lastReadMessageIdServer = channel.state.read[userId]?.last_read_message_id;\n    return latestMessageIdInChannel === lastReadMessageIdServer;\n};\n/**\n * Takes care of marking a channel read. The channel is read only if all the following applies:\n * 1. the message list is not rendered in a thread\n * 2. the message list is scrolled to the bottom\n * 3. the channel was not marked unread by the user\n * @param isMessageListScrolledToBottom\n * @param messageListIsThread\n * @param wasChannelMarkedUnread\n */\nexport const useMarkRead = ({ isMessageListScrolledToBottom, messageListIsThread, wasMarkedUnread, }) => {\n    const { client } = useChatContext('useMarkRead');\n    const { markRead, setChannelUnreadUiState } = useChannelActionContext('useMarkRead');\n    const { channel } = useChannelStateContext('useMarkRead');\n    useEffect(() => {\n        const shouldMarkRead = () => !document.hidden &&\n            !wasMarkedUnread &&\n            !messageListIsThread &&\n            isMessageListScrolledToBottom &&\n            client.user?.id &&\n            !hasReadLastMessage(channel, client.user.id);\n        const onVisibilityChange = () => {\n            if (shouldMarkRead())\n                markRead();\n        };\n        const handleMessageNew = (event) => {\n            const mainChannelUpdated = !event.message?.parent_id || event.message?.show_in_channel;\n            if (!isMessageListScrolledToBottom || wasMarkedUnread || document.hidden) {\n                setChannelUnreadUiState((prev) => {\n                    const previousUnreadCount = prev?.unread_messages ?? 0;\n                    const previousLastMessage = getPreviousLastMessage(channel.state.messages, event.message);\n                    return {\n                        ...(prev || {}),\n                        last_read: prev?.last_read ??\n                            (previousUnreadCount === 0 && previousLastMessage?.created_at\n                                ? new Date(previousLastMessage.created_at)\n                                : new Date(0)), // not having information about the last read message means the whole channel is unread,\n                        unread_messages: previousUnreadCount + 1,\n                    };\n                });\n            }\n            else if (mainChannelUpdated && shouldMarkRead()) {\n                markRead();\n            }\n        };\n        channel.on('message.new', handleMessageNew);\n        document.addEventListener('visibilitychange', onVisibilityChange);\n        if (shouldMarkRead()) {\n            markRead();\n        }\n        return () => {\n            channel.off('message.new', handleMessageNew);\n            document.removeEventListener('visibilitychange', onVisibilityChange);\n        };\n    }, [\n        channel,\n        client,\n        isMessageListScrolledToBottom,\n        markRead,\n        messageListIsThread,\n        setChannelUnreadUiState,\n        wasMarkedUnread,\n    ]);\n};\nfunction getPreviousLastMessage(messages, newMessage) {\n    if (!newMessage)\n        return;\n    let previousLastMessage;\n    for (let i = messages.length - 1; i >= 0; i--) {\n        const msg = messages[i];\n        if (!msg?.id)\n            break;\n        if (msg.id !== newMessage.id) {\n            previousLastMessage = msg;\n            break;\n        }\n    }\n    return previousLastMessage;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AAAA;;;AACA,MAAM,qBAAqB,CAAC,SAAS;IACjC,MAAM,2BAA2B,QAAQ,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;IAC5E,MAAM,0BAA0B,QAAQ,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE;IAC5D,OAAO,6BAA6B;AACxC;AAUO,MAAM,cAAc,CAAC,EAAE,6BAA6B,EAAE,mBAAmB,EAAE,eAAe,EAAG;IAChG,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,MAAM,EAAE,QAAQ,EAAE,uBAAuB,EAAE,GAAG,CAAA,GAAA,qLAAA,CAAA,0BAAuB,AAAD,EAAE;IACtE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,oLAAA,CAAA,yBAAsB,AAAD,EAAE;IAC3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACN,MAAM;wDAAiB,IAAM,CAAC,SAAS,MAAM,IACzC,CAAC,mBACD,CAAC,uBACD,iCACA,OAAO,IAAI,EAAE,MACb,CAAC,mBAAmB,SAAS,OAAO,IAAI,CAAC,EAAE;;YAC/C,MAAM;4DAAqB;oBACvB,IAAI,kBACA;gBACR;;YACA,MAAM;0DAAmB,CAAC;oBACtB,MAAM,qBAAqB,CAAC,MAAM,OAAO,EAAE,aAAa,MAAM,OAAO,EAAE;oBACvE,IAAI,CAAC,iCAAiC,mBAAmB,SAAS,MAAM,EAAE;wBACtE;sEAAwB,CAAC;gCACrB,MAAM,sBAAsB,MAAM,mBAAmB;gCACrD,MAAM,sBAAsB,uBAAuB,QAAQ,KAAK,CAAC,QAAQ,EAAE,MAAM,OAAO;gCACxF,OAAO;oCACH,GAAI,QAAQ,CAAC,CAAC;oCACd,WAAW,MAAM,aACb,CAAC,wBAAwB,KAAK,qBAAqB,aAC7C,IAAI,KAAK,oBAAoB,UAAU,IACvC,IAAI,KAAK,EAAE;oCACrB,iBAAiB,sBAAsB;gCAC3C;4BACJ;;oBACJ,OACK,IAAI,sBAAsB,kBAAkB;wBAC7C;oBACJ;gBACJ;;YACA,QAAQ,EAAE,CAAC,eAAe;YAC1B,SAAS,gBAAgB,CAAC,oBAAoB;YAC9C,IAAI,kBAAkB;gBAClB;YACJ;YACA;yCAAO;oBACH,QAAQ,GAAG,CAAC,eAAe;oBAC3B,SAAS,mBAAmB,CAAC,oBAAoB;gBACrD;;QACJ;gCAAG;QACC;QACA;QACA;QACA;QACA;QACA;QACA;KACH;AACL;AACA,SAAS,uBAAuB,QAAQ,EAAE,UAAU;IAChD,IAAI,CAAC,YACD;IACJ,IAAI;IACJ,IAAK,IAAI,IAAI,SAAS,MAAM,GAAG,GAAG,KAAK,GAAG,IAAK;QAC3C,MAAM,MAAM,QAAQ,CAAC,EAAE;QACvB,IAAI,CAAC,KAAK,IACN;QACJ,IAAI,IAAI,EAAE,KAAK,WAAW,EAAE,EAAE;YAC1B,sBAAsB;YACtB;QACJ;IACJ;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 763, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/MessageNotification.js"],"sourcesContent":["import React from 'react';\nconst UnMemoizedMessageNotification = (props) => {\n    const { children, onClick, showNotification = true } = props;\n    if (!showNotification)\n        return null;\n    return (React.createElement(\"button\", { \"aria-live\": 'polite', className: `str-chat__message-notification`, \"data-testid\": 'message-notification', onClick: onClick }, children));\n};\nexport const MessageNotification = React.memo(UnMemoizedMessageNotification);\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,gCAAgC,CAAC;IACnC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,mBAAmB,IAAI,EAAE,GAAG;IACvD,IAAI,CAAC,kBACD,OAAO;IACX,OAAQ,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,UAAU;QAAE,aAAa;QAAU,WAAW,CAAC,8BAA8B,CAAC;QAAE,eAAe;QAAwB,SAAS;IAAQ,GAAG;AAC3K;AACO,MAAM,sBAAsB,6JAAA,CAAA,UAAK,CAAC,IAAI,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 785, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/CustomNotification.js"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nconst UnMemoizedCustomNotification = (props) => {\n    const { active, children, className, type } = props;\n    if (!active)\n        return null;\n    return (React.createElement(\"div\", { \"aria-live\": 'polite', className: clsx(`str-chat__custom-notification notification-${type}`, `str-chat__notification`, `str-chat-react__notification`, className), \"data-testid\": 'custom-notification' }, children));\n};\nexport const CustomNotification = React.memo(UnMemoizedCustomNotification);\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,+BAA+B,CAAC;IAClC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG;IAC9C,IAAI,CAAC,QACD,OAAO;IACX,OAAQ,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,aAAa;QAAU,WAAW,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EAAE,CAAC,2CAA2C,EAAE,MAAM,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,4BAA4B,CAAC,EAAE;QAAY,eAAe;IAAsB,GAAG;AACpP;AACO,MAAM,qBAAqB,6JAAA,CAAA,UAAK,CAAC,IAAI,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 808, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/ConnectionStatus.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { CustomNotification } from './CustomNotification';\nimport { useChatContext, useTranslationContext } from '../../context';\nconst UnMemoizedConnectionStatus = () => {\n    const { client } = useChatContext('ConnectionStatus');\n    const { t } = useTranslationContext('ConnectionStatus');\n    const [online, setOnline] = useState(true);\n    useEffect(() => {\n        const connectionChanged = ({ online: onlineStatus = false }) => {\n            if (online !== onlineStatus) {\n                setOnline(onlineStatus);\n            }\n        };\n        client.on('connection.changed', connectionChanged);\n        return () => client.off('connection.changed', connectionChanged);\n    }, [client, online]);\n    return (React.createElement(CustomNotification, { active: !online, className: 'str-chat__connection-status-notification', type: 'error' }, t('Connection failure, reconnecting now...')));\n};\nexport const ConnectionStatus = React.memo(UnMemoizedConnectionStatus);\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AACA,MAAM,6BAA6B;IAC/B,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,mLAAA,CAAA,wBAAqB,AAAD,EAAE;IACpC,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gDAAE;YACN,MAAM;0EAAoB,CAAC,EAAE,QAAQ,eAAe,KAAK,EAAE;oBACvD,IAAI,WAAW,cAAc;wBACzB,UAAU;oBACd;gBACJ;;YACA,OAAO,EAAE,CAAC,sBAAsB;YAChC;wDAAO,IAAM,OAAO,GAAG,CAAC,sBAAsB;;QAClD;+CAAG;QAAC;QAAQ;KAAO;IACnB,OAAQ,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,qMAAA,CAAA,qBAAkB,EAAE;QAAE,QAAQ,CAAC;QAAQ,WAAW;QAA4C,MAAM;IAAQ,GAAG,EAAE;AACjJ;AACO,MAAM,mBAAmB,6JAAA,CAAA,UAAK,CAAC,IAAI,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 853, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/MessageListNotifications.js"],"sourcesContent":["import React from 'react';\nimport { ConnectionStatus } from './ConnectionStatus';\nimport { CustomNotification } from './CustomNotification';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport const MessageListNotifications = (props) => {\n    const { hasNewMessages, isMessageListScrolledToBottom, isNotAtLatestMessageSet, MessageNotification, notifications, scrollToBottom, threadList, unreadCount, } = props;\n    const { t } = useTranslationContext('MessageListNotifications');\n    return (React.createElement(\"div\", { className: 'str-chat__list-notifications' },\n        notifications.map((notification) => (React.createElement(CustomNotification, { active: true, key: notification.id, type: notification.type }, notification.text))),\n        React.createElement(ConnectionStatus, null),\n        React.createElement(MessageNotification, { isMessageListScrolledToBottom: isMessageListScrolledToBottom, onClick: scrollToBottom, showNotification: hasNewMessages || isNotAtLatestMessageSet, threadList: threadList, unreadCount: unreadCount }, isNotAtLatestMessageSet\n            ? t('Latest Messages')\n            : t('New Messages!'))));\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACO,MAAM,2BAA2B,CAAC;IACrC,MAAM,EAAE,cAAc,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,aAAa,EAAE,cAAc,EAAE,UAAU,EAAE,WAAW,EAAG,GAAG;IACjK,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,mLAAA,CAAA,wBAAqB,AAAD,EAAE;IACpC,OAAQ,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,WAAW;IAA+B,GAC3E,cAAc,GAAG,CAAC,CAAC,eAAkB,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,qMAAA,CAAA,qBAAkB,EAAE;YAAE,QAAQ;YAAM,KAAK,aAAa,EAAE;YAAE,MAAM,aAAa,IAAI;QAAC,GAAG,aAAa,IAAI,IAC/J,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,mMAAA,CAAA,mBAAgB,EAAE,OACtC,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,qBAAqB;QAAE,+BAA+B;QAA+B,SAAS;QAAgB,kBAAkB,kBAAkB;QAAyB,YAAY;QAAY,aAAa;IAAY,GAAG,0BAC7O,EAAE,qBACF,EAAE;AAChB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 887, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/icons.js"],"sourcesContent":["import React from 'react';\nexport const ArrowUp = ({ className, color }) => (React.createElement(\"svg\", { className: className, \"data-testid\": 'arrow-up', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },\n    React.createElement(\"path\", { d: 'M16.59 15.7051L12 11.1251L7.41 15.7051L6 14.2951L12 8.29508L18 14.2951L16.59 15.7051Z', fill: color || 'var(--primary-color)' })));\nexport const ArrowDown = ({ className, color }) => (React.createElement(\"svg\", { className: className, \"data-testid\": 'arrow-down', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },\n    React.createElement(\"path\", { d: 'M7.41 8.29504L12 12.875L16.59 8.29504L18 9.70504L12 15.705L6 9.70504L7.41 8.29504Z', fill: color || 'var(--primary-color)' })));\nexport const CloseIcon = () => (React.createElement(\"svg\", { fill: 'currentColor', viewBox: '0 0 14 13', xmlns: 'http://www.w3.org/2000/svg' },\n    React.createElement(\"path\", { d: 'M1.32227 12.3408C0.944336 11.9629 0.953125 11.3213 1.32227 10.9521L5.60254 6.66309L1.32227 2.38281C0.953125 2.01367 0.944336 1.37207 1.32227 0.994141C1.7002 0.616211 2.3418 0.625 2.71094 0.985352L7 5.27441L11.2803 0.994141C11.6494 0.625 12.291 0.616211 12.6689 0.994141C13.0469 1.37207 13.0381 2.01367 12.6689 2.38281L8.38867 6.66309L12.6689 10.9521C13.0381 11.3213 13.0469 11.9629 12.6689 12.3408C12.291 12.7188 11.6494 12.71 11.2803 12.3408L7 8.06055L2.71094 12.3408C2.3418 12.71 1.7002 12.7188 1.32227 12.3408Z' })));\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,UAAU,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAM,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,WAAW;QAAW,eAAe;QAAY,MAAM;QAAQ,QAAQ;QAAM,SAAS;QAAa,OAAO;QAAM,OAAO;IAA6B,GAC/N,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,QAAQ;QAAE,GAAG;QAAyF,MAAM,SAAS;IAAuB;AAC7J,MAAM,YAAY,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAM,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,WAAW;QAAW,eAAe;QAAc,MAAM;QAAQ,QAAQ;QAAM,SAAS;QAAa,OAAO;QAAM,OAAO;IAA6B,GACnO,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,QAAQ;QAAE,GAAG;QAAsF,MAAM,SAAS;IAAuB;AAC1J,MAAM,YAAY,IAAO,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,MAAM;QAAgB,SAAS;QAAa,OAAO;IAA6B,GACzI,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,QAAQ;QAAE,GAAG;IAAogB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 931, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/UnreadMessagesNotification.js"],"sourcesContent":["import React from 'react';\nimport { CloseIcon } from './icons';\nimport { useChannelActionContext, useTranslationContext } from '../../context';\nexport const UnreadMessagesNotification = ({ queryMessageLimit, showCount, unreadCount, }) => {\n    const { jumpToFirstUnreadMessage, markRead } = useChannelActionContext('UnreadMessagesNotification');\n    const { t } = useTranslationContext('UnreadMessagesNotification');\n    return (React.createElement(\"div\", { className: 'str-chat__unread-messages-notification', \"data-testid\": 'unread-messages-notification' },\n        React.createElement(\"button\", { onClick: () => jumpToFirstUnreadMessage(queryMessageLimit) }, unreadCount && showCount\n            ? t('{{count}} unread', { count: unreadCount ?? 0 })\n            : t('Unread messages')),\n        React.createElement(\"button\", { onClick: () => markRead() },\n            React.createElement(CloseIcon, null))));\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AACO,MAAM,6BAA6B,CAAC,EAAE,iBAAiB,EAAE,SAAS,EAAE,WAAW,EAAG;IACrF,MAAM,EAAE,wBAAwB,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,qLAAA,CAAA,0BAAuB,AAAD,EAAE;IACvE,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,mLAAA,CAAA,wBAAqB,AAAD,EAAE;IACpC,OAAQ,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,WAAW;QAA0C,eAAe;IAA+B,GACpI,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,UAAU;QAAE,SAAS,IAAM,yBAAyB;IAAmB,GAAG,eAAe,YACvG,EAAE,oBAAoB;QAAE,OAAO,eAAe;IAAE,KAChD,EAAE,qBACR,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,UAAU;QAAE,SAAS,IAAM;IAAW,GACtD,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,wLAAA,CAAA,YAAS,EAAE;AAC3C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 961, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport { getIsFirstUnreadMessage, isDateSeparatorMessage, isIntroMessage } from './utils';\nimport { Message } from '../Message';\nimport { DateSeparator as DefaultDateSeparator } from '../DateSeparator';\nimport { EventComponent as DefaultMessageSystem } from '../EventComponent';\nimport { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from './UnreadMessagesSeparator';\nexport function defaultRenderMessages({ channelUnreadUiState, components, customClasses, lastReceivedMessageId: lastReceivedId, messageGroupStyles, messages, readData, sharedMessageProps: messageProps, }) {\n    const { DateSeparator = DefaultDateSeparator, HeaderComponent, MessageSystem = DefaultMessageSystem, UnreadMessagesSeparator = DefaultUnreadMessagesSeparator, } = components;\n    const renderedMessages = [];\n    let firstMessage;\n    let previousMessage = undefined;\n    for (let index = 0; index < messages.length; index++) {\n        const message = messages[index];\n        if (isDateSeparatorMessage(message)) {\n            renderedMessages.push(React.createElement(\"li\", { key: `${message.date.toISOString()}-i` },\n                React.createElement(DateSeparator, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })));\n        }\n        else if (isIntroMessage(message)) {\n            if (HeaderComponent) {\n                renderedMessages.push(React.createElement(\"li\", { key: 'intro' },\n                    React.createElement(HeaderComponent, null)));\n            }\n        }\n        else if (message.type === 'system') {\n            renderedMessages.push(React.createElement(\"li\", { \"data-message-id\": message.id, key: message.id || message.created_at.toISOString() },\n                React.createElement(MessageSystem, { message: message })));\n        }\n        else {\n            if (!firstMessage) {\n                firstMessage = message;\n            }\n            const groupStyles = messageGroupStyles[message.id] || '';\n            const messageClass = customClasses?.message || `str-chat__li str-chat__li--${groupStyles}`;\n            const isFirstUnreadMessage = getIsFirstUnreadMessage({\n                firstUnreadMessageId: channelUnreadUiState?.first_unread_message_id,\n                isFirstMessage: !!firstMessage?.id && firstMessage.id === message.id,\n                lastReadDate: channelUnreadUiState?.last_read,\n                lastReadMessageId: channelUnreadUiState?.last_read_message_id,\n                message,\n                previousMessage,\n                unreadMessageCount: channelUnreadUiState?.unread_messages,\n            });\n            renderedMessages.push(React.createElement(Fragment, { key: message.id || message.created_at.toISOString() },\n                isFirstUnreadMessage && UnreadMessagesSeparator && (React.createElement(\"li\", { className: 'str-chat__li str-chat__unread-messages-separator-wrapper' },\n                    React.createElement(UnreadMessagesSeparator, { unreadCount: channelUnreadUiState?.unread_messages }))),\n                React.createElement(\"li\", { className: messageClass, \"data-message-id\": message.id, \"data-testid\": messageClass },\n                    React.createElement(Message, { groupStyles: [groupStyles], lastReceivedId: lastReceivedId, message: message, readBy: readData[message.id] || [], ...messageProps }))));\n            previousMessage = message;\n        }\n    }\n    return renderedMessages;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1049, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/MessageList.js"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport { useEnrichedMessages, useMessageListElements, useScrollLocationLogic, useUnreadMessagesNotification, } from './hooks/MessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { DialogManagerProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { MessageListContextProvider } from '../../context/MessageListContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator/InfiniteScroll';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { defaultRenderMessages } from './renderMessages';\nimport { useStableId } from '../UtilityComponents/useStableId';\nimport { DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, DEFAULT_NEXT_CHANNEL_PAGE_SIZE, } from '../../constants/limits';\nconst MessageListWithContext = (props) => {\n    const { channel, channelUnreadUiState, disableDateSeparator = false, groupStyles, hasMoreNewer = false, headerPosition, hideDeletedMessages = false, hideNewMessageSeparator = false, highlightedMessageId, internalInfiniteScrollProps: { threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, ...restInternalInfiniteScrollProps } = {}, jumpToLatestMessage = () => Promise.resolve(), loadMore: loadMoreCallback, loadMoreNewer: loadMoreNewerCallback, // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n    maxTimeBetweenGroupedMessages, messageActions = Object.keys(MESSAGE_ACTIONS), messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE, messages = [], noGroupByUser = false, notifications, pinPermissions = defaultPinPermissions, reactionDetailsSort, read, renderMessages = defaultRenderMessages, returnAllReadData = false, reviewProcessedMessage, showUnreadNotificationAlways, sortReactionDetails, sortReactions, suppressAutoscroll, threadList = false, unsafeHTML = false, } = props;\n    const [listElement, setListElement] = React.useState(null);\n    const [ulElement, setUlElement] = React.useState(null);\n    const { customClasses } = useChatContext('MessageList');\n    const { EmptyStateIndicator = DefaultEmptyStateIndicator, LoadingIndicator = DefaultLoadingIndicator, MessageListMainPanel = DefaultMessageListMainPanel, MessageListNotifications = DefaultMessageListNotifications, MessageNotification = DefaultMessageNotification, TypingIndicator = DefaultTypingIndicator, UnreadMessagesNotification = DefaultUnreadMessagesNotification, } = useComponentContext('MessageList');\n    const { hasNewMessages, isMessageListScrolledToBottom, onScroll, scrollToBottom, wrapperRect, } = useScrollLocationLogic({\n        hasMoreNewer,\n        listElement,\n        loadMoreScrollThreshold,\n        messages, // todo: is it correct to base the scroll logic on an array that does not contain date separators or intro?\n        scrolledUpThreshold: props.scrolledUpThreshold,\n        suppressAutoscroll,\n    });\n    const { show: showUnreadMessagesNotification } = useUnreadMessagesNotification({\n        isMessageListScrolledToBottom,\n        showAlways: !!showUnreadNotificationAlways,\n        unreadCount: channelUnreadUiState?.unread_messages,\n    });\n    useMarkRead({\n        isMessageListScrolledToBottom,\n        messageListIsThread: threadList,\n        wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id,\n    });\n    const { messageGroupStyles, messages: enrichedMessages } = useEnrichedMessages({\n        channel,\n        disableDateSeparator,\n        groupStyles,\n        headerPosition,\n        hideDeletedMessages,\n        hideNewMessageSeparator,\n        maxTimeBetweenGroupedMessages,\n        messages,\n        noGroupByUser,\n        reviewProcessedMessage,\n    });\n    const elements = useMessageListElements({\n        channelUnreadUiState,\n        enrichedMessages,\n        internalMessageProps: {\n            additionalMessageInputProps: props.additionalMessageInputProps,\n            closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n            customMessageActions: props.customMessageActions,\n            disableQuotedMessages: props.disableQuotedMessages,\n            formatDate: props.formatDate,\n            getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n            getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n            getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n            getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,\n            getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,\n            getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n            getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n            getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n            Message: props.Message,\n            messageActions,\n            messageListRect: wrapperRect,\n            onlySenderCanEdit: props.onlySenderCanEdit,\n            onMentionsClick: props.onMentionsClick,\n            onMentionsHover: props.onMentionsHover,\n            onUserClick: props.onUserClick,\n            onUserHover: props.onUserHover,\n            openThread: props.openThread,\n            pinPermissions,\n            reactionDetailsSort,\n            renderText: props.renderText,\n            retrySendMessage: props.retrySendMessage,\n            sortReactionDetails,\n            sortReactions,\n            unsafeHTML,\n        },\n        messageGroupStyles,\n        read,\n        renderMessages,\n        returnAllReadData,\n        threadList,\n    });\n    const messageListClass = customClasses?.messageList || 'str-chat__list';\n    const loadMore = React.useCallback(() => {\n        if (loadMoreCallback) {\n            loadMoreCallback(messageLimit);\n        }\n    }, [loadMoreCallback, messageLimit]);\n    const loadMoreNewer = React.useCallback(() => {\n        if (loadMoreNewerCallback) {\n            loadMoreNewerCallback(messageLimit);\n        }\n    }, [loadMoreNewerCallback, messageLimit]);\n    const scrollToBottomFromNotification = React.useCallback(async () => {\n        if (hasMoreNewer) {\n            await jumpToLatestMessage();\n        }\n        else {\n            scrollToBottom();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [scrollToBottom, hasMoreNewer]);\n    React.useLayoutEffect(() => {\n        if (highlightedMessageId) {\n            const element = ulElement?.querySelector(`[data-message-id='${highlightedMessageId}']`);\n            element?.scrollIntoView({ block: 'center' });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [highlightedMessageId]);\n    const id = useStableId();\n    const showEmptyStateIndicator = elements.length === 0 && !threadList;\n    const dialogManagerId = threadList\n        ? `message-list-dialog-manager-thread-${id}`\n        : `message-list-dialog-manager-${id}`;\n    return (React.createElement(MessageListContextProvider, { value: { listElement, scrollToBottom } },\n        React.createElement(MessageListMainPanel, null,\n            React.createElement(DialogManagerProvider, { id: dialogManagerId },\n                !threadList && showUnreadMessagesNotification && (React.createElement(UnreadMessagesNotification, { unreadCount: channelUnreadUiState?.unread_messages })),\n                React.createElement(\"div\", { className: clsx(messageListClass, customClasses?.threadList), onScroll: onScroll, ref: setListElement, tabIndex: 0 }, showEmptyStateIndicator ? (React.createElement(EmptyStateIndicator, { listType: threadList ? 'thread' : 'message' })) : (React.createElement(InfiniteScroll, { className: 'str-chat__message-list-scroll', \"data-testid\": 'reverse-infinite-scroll', hasNextPage: props.hasMoreNewer, hasPreviousPage: props.hasMore, head: props.head, isLoading: props.loadingMore, loader: React.createElement(\"div\", { className: 'str-chat__list__loading', key: 'loading-indicator' }, props.loadingMore && React.createElement(LoadingIndicator, { size: 20 })), loadNextPage: loadMoreNewer, loadPreviousPage: loadMore, threshold: loadMoreScrollThreshold, ...restInternalInfiniteScrollProps },\n                    React.createElement(\"ul\", { className: 'str-chat__ul', ref: setUlElement }, elements),\n                    React.createElement(TypingIndicator, { threadList: threadList }),\n                    React.createElement(\"div\", { key: 'bottom' })))))),\n        React.createElement(MessageListNotifications, { hasNewMessages: hasNewMessages, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification, notifications: notifications, scrollToBottom: scrollToBottomFromNotification, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages })));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\nexport const MessageList = (props) => {\n    const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext('MessageList');\n    const { members: membersPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    mutes: mutesPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    watchers: watchersPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ...restChannelStateContext } = useChannelStateContext('MessageList');\n    return (React.createElement(MessageListWithContext, { jumpToLatestMessage: jumpToLatestMessage, loadMore: loadMore, loadMoreNewer: loadMoreNewer, ...restChannelStateContext, ...props }));\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1293, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/GiphyPreviewMessage.js"],"sourcesContent":["import React from 'react';\nimport { Message } from '../Message/Message';\nexport const GiphyPreviewMessage = (props) => {\n    const { message } = props;\n    return (React.createElement(\"div\", { className: 'giphy-preview-message' },\n        React.createElement(Message, { message: message })));\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACO,MAAM,sBAAsB,CAAC;IAChC,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,OAAQ,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,OAAO;QAAE,WAAW;IAAwB,GACpE,6JAAA,CAAA,UAAK,CAAC,aAAa,CAAC,sLAAA,CAAA,UAAO,EAAE;QAAE,SAAS;IAAQ;AACxD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1314, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useGiphyPreview.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../../context/ChatContext';\nexport const useGiphyPreview = (separateGiphyPreview) => {\n    const [giphyPreviewMessage, setGiphyPreviewMessage] = useState();\n    const { client } = useChatContext('useGiphyPreview');\n    useEffect(() => {\n        if (!separateGiphyPreview)\n            return;\n        const handleEvent = (event) => {\n            const { message, user } = event;\n            if (message?.command === 'giphy' && user?.id === client.userID) {\n                setGiphyPreviewMessage(undefined);\n            }\n        };\n        client.on('message.new', handleEvent);\n        return () => client.off('message.new', handleEvent);\n    }, [client, separateGiphyPreview]);\n    return {\n        giphyPreviewMessage,\n        setGiphyPreviewMessage: separateGiphyPreview ? setGiphyPreviewMessage : undefined,\n    };\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACO,MAAM,kBAAkB,CAAC;IAC5B,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;IAC7D,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,4KAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACN,IAAI,CAAC,sBACD;YACJ,MAAM;yDAAc,CAAC;oBACjB,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG;oBAC1B,IAAI,SAAS,YAAY,WAAW,MAAM,OAAO,OAAO,MAAM,EAAE;wBAC5D,uBAAuB;oBAC3B;gBACJ;;YACA,OAAO,EAAE,CAAC,eAAe;YACzB;6CAAO,IAAM,OAAO,GAAG,CAAC,eAAe;;QAC3C;oCAAG;QAAC;QAAQ;KAAqB;IACjC,OAAO;QACH;QACA,wBAAwB,uBAAuB,yBAAyB;IAC5E;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1355, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useMessageSetKey.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nexport const useMessageSetKey = ({ messages }) => {\n    /**\n     * Logic to update the key of the virtuoso component when the list jumps to a new location.\n     */\n    const [messageSetKey, setMessageSetKey] = useState(+new Date());\n    const firstMessageId = useRef(undefined);\n    useEffect(() => {\n        const continuousSet = messages?.find((message) => message.id === firstMessageId.current);\n        if (!continuousSet) {\n            setMessageSetKey(+new Date());\n        }\n        firstMessageId.current = messages?.[0]?.id;\n    }, [messages]);\n    return {\n        messageSetKey,\n    };\n};\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAC,EAAE,QAAQ,EAAE;IACzC;;KAEC,GACD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,IAAI;IACxD,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAC9B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACN,MAAM,gBAAgB,UAAU;8CAAK,CAAC,UAAY,QAAQ,EAAE,KAAK,eAAe,OAAO;;YACvF,IAAI,CAAC,eAAe;gBAChB,iBAAiB,CAAC,IAAI;YAC1B;YACA,eAAe,OAAO,GAAG,UAAU,CAAC,EAAE,EAAE;QAC5C;qCAAG;QAAC;KAAS;IACb,OAAO;QACH;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1388, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useNewMessageNotification.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nexport function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {\n    const [newMessagesNotification, setNewMessagesNotification] = useState(false);\n    const [isMessageListScrolledToBottom, setIsMessageListScrolledToBottom] = useState(true);\n    /**\n     * use the flag to avoid the initial \"new messages\" quick blink\n     */\n    const didMount = useRef(false);\n    const lastMessageId = useRef('');\n    const atBottom = useRef(false);\n    useEffect(() => {\n        if (hasMoreNewer) {\n            setNewMessagesNotification(true);\n            return;\n        }\n        /* handle scrolling behavior for new messages */\n        if (!messages?.length)\n            return;\n        const lastMessage = messages[messages.length - 1];\n        const prevMessageId = lastMessageId.current;\n        lastMessageId.current = lastMessage.id || ''; // update last message id\n        /* do nothing if new messages are loaded from top(loadMore)  */\n        if (lastMessage.id === prevMessageId)\n            return;\n        /* if list is already at the bottom return, followOutput will do the job */\n        if (atBottom.current)\n            return;\n        /* if the new message belongs to current user scroll to bottom */\n        if (lastMessage.user?.id !== currentUserId && didMount.current) {\n            /* otherwise just show newMessage notification  */\n            setNewMessagesNotification(true);\n        }\n        didMount.current = true;\n    }, [currentUserId, messages, hasMoreNewer]);\n    return {\n        atBottom,\n        isMessageListScrolledToBottom,\n        newMessagesNotification,\n        setIsMessageListScrolledToBottom,\n        setNewMessagesNotification,\n    };\n}\n"],"names":[],"mappings":";;;AAAA;;AACO,SAAS,0BAA0B,QAAQ,EAAE,aAAa,EAAE,YAAY;IAC3E,MAAM,CAAC,yBAAyB,2BAA2B,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvE,MAAM,CAAC,+BAA+B,iCAAiC,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnF;;KAEC,GACD,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACxB,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAC7B,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACxB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+CAAE;YACN,IAAI,cAAc;gBACd,2BAA2B;gBAC3B;YACJ;YACA,8CAA8C,GAC9C,IAAI,CAAC,UAAU,QACX;YACJ,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;YACjD,MAAM,gBAAgB,cAAc,OAAO;YAC3C,cAAc,OAAO,GAAG,YAAY,EAAE,IAAI,IAAI,yBAAyB;YACvE,6DAA6D,GAC7D,IAAI,YAAY,EAAE,KAAK,eACnB;YACJ,yEAAyE,GACzE,IAAI,SAAS,OAAO,EAChB;YACJ,+DAA+D,GAC/D,IAAI,YAAY,IAAI,EAAE,OAAO,iBAAiB,SAAS,OAAO,EAAE;gBAC5D,gDAAgD,GAChD,2BAA2B;YAC/B;YACA,SAAS,OAAO,GAAG;QACvB;8CAAG;QAAC;QAAe;QAAU;KAAa;IAC1C,OAAO;QACH;QACA;QACA;QACA;QACA;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1437, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/usePrependMessagesCount.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport { isLocalMessage } from '../../utils';\nconst STATUSES_EXCLUDED_FROM_PREPEND = {\n    failed: true,\n    sending: true,\n};\nexport function usePrependedMessagesCount(messages, hasDateSeparator) {\n    const firstRealMessageIndex = hasDateSeparator ? 1 : 0;\n    const firstMessageOnFirstLoadedPage = useRef(undefined);\n    const previousFirstMessageOnFirstLoadedPage = useRef(undefined);\n    const previousNumItemsPrepended = useRef(0);\n    const numItemsPrepended = useMemo(() => {\n        if (!messages || !messages.length) {\n            previousNumItemsPrepended.current = 0;\n            return 0;\n        }\n        const currentFirstMessage = messages?.[firstRealMessageIndex];\n        const noNewMessages = currentFirstMessage?.id === previousFirstMessageOnFirstLoadedPage.current?.id;\n        // This is possible only, when sending messages very quickly (basically single char messages submitted like a crazy) in empty channel (first page)\n        // Optimistic UI update, when sending messages, can lead to a situation, when\n        // the order of the messages changes for a moment. This can happen, when a user\n        // sends multiple messages withing few milliseconds. E.g. we send a message A\n        // then message B. At first we have message array with both messages of status \"sending\"\n        // then response for message A is received with a new - later - created_at timestamp\n        // this leads to rearrangement of 1.B (\"sending\"), 2.A (\"received\"). Still firstMessageOnFirstLoadedPage.current\n        // points to message A, but now this message has index 1 => previousNumItemsPrepended.current === 1\n        // That in turn leads to incorrect index calculation in VirtualizedMessageList trying to access a message\n        // at non-existent index. Therefore, we ignore messages of status \"sending\" / \"failed\" in order they are\n        // not considered as prepended messages.\n        const currentFirstMessageStatus = isLocalMessage(currentFirstMessage)\n            ? currentFirstMessage.status\n            : undefined;\n        const firstMsgMovedAfterMessagesInExcludedStatus = !!(currentFirstMessageStatus &&\n            STATUSES_EXCLUDED_FROM_PREPEND[currentFirstMessageStatus]);\n        if (noNewMessages || firstMsgMovedAfterMessagesInExcludedStatus) {\n            return previousNumItemsPrepended.current;\n        }\n        if (!firstMessageOnFirstLoadedPage.current) {\n            firstMessageOnFirstLoadedPage.current = currentFirstMessage;\n        }\n        previousFirstMessageOnFirstLoadedPage.current = currentFirstMessage;\n        // if new messages were prepended, find out how many\n        // start with this number because there cannot be fewer prepended items than before\n        for (let prependedMessageCount = previousNumItemsPrepended.current; prependedMessageCount < messages.length; prependedMessageCount += 1) {\n            const messageIsFirstOnFirstLoadedPage = messages[prependedMessageCount].id === firstMessageOnFirstLoadedPage.current?.id;\n            if (messageIsFirstOnFirstLoadedPage) {\n                previousNumItemsPrepended.current = prependedMessageCount - firstRealMessageIndex;\n                return previousNumItemsPrepended.current;\n            }\n        }\n        // if no match has found, we have jumped - reset the prepended item count.\n        firstMessageOnFirstLoadedPage.current = currentFirstMessage;\n        previousNumItemsPrepended.current = 0;\n        return 0;\n        // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)\n        // that's why the second dependency is necessary\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [firstRealMessageIndex, messages, messages?.length]);\n    return numItemsPrepended;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,iCAAiC;IACnC,QAAQ;IACR,SAAS;AACb;AACO,SAAS,0BAA0B,QAAQ,EAAE,gBAAgB;IAChE,MAAM,wBAAwB,mBAAmB,IAAI;IACrD,MAAM,gCAAgC,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAC7C,MAAM,wCAAwC,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACrD,MAAM,4BAA4B,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACzC,MAAM,oBAAoB,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;gEAAE;YAC9B,IAAI,CAAC,YAAY,CAAC,SAAS,MAAM,EAAE;gBAC/B,0BAA0B,OAAO,GAAG;gBACpC,OAAO;YACX;YACA,MAAM,sBAAsB,UAAU,CAAC,sBAAsB;YAC7D,MAAM,gBAAgB,qBAAqB,OAAO,sCAAsC,OAAO,EAAE;YACjG,kJAAkJ;YAClJ,6EAA6E;YAC7E,+EAA+E;YAC/E,6EAA6E;YAC7E,wFAAwF;YACxF,oFAAoF;YACpF,gHAAgH;YAChH,mGAAmG;YACnG,yGAAyG;YACzG,wGAAwG;YACxG,wCAAwC;YACxC,MAAM,4BAA4B,CAAA,GAAA,wLAAA,CAAA,iBAAc,AAAD,EAAE,uBAC3C,oBAAoB,MAAM,GAC1B;YACN,MAAM,6CAA6C,CAAC,CAAC,CAAC,6BAClD,8BAA8B,CAAC,0BAA0B;YAC7D,IAAI,iBAAiB,4CAA4C;gBAC7D,OAAO,0BAA0B,OAAO;YAC5C;YACA,IAAI,CAAC,8BAA8B,OAAO,EAAE;gBACxC,8BAA8B,OAAO,GAAG;YAC5C;YACA,sCAAsC,OAAO,GAAG;YAChD,oDAAoD;YACpD,mFAAmF;YACnF,IAAK,IAAI,wBAAwB,0BAA0B,OAAO,EAAE,wBAAwB,SAAS,MAAM,EAAE,yBAAyB,EAAG;gBACrI,MAAM,kCAAkC,QAAQ,CAAC,sBAAsB,CAAC,EAAE,KAAK,8BAA8B,OAAO,EAAE;gBACtH,IAAI,iCAAiC;oBACjC,0BAA0B,OAAO,GAAG,wBAAwB;oBAC5D,OAAO,0BAA0B,OAAO;gBAC5C;YACJ;YACA,0EAA0E;YAC1E,8BAA8B,OAAO,GAAG;YACxC,0BAA0B,OAAO,GAAG;YACpC,OAAO;QACP,gGAAgG;QAChG,gDAAgD;QAChD,uDAAuD;QAC3D;+DAAG;QAAC;QAAuB;QAAU,UAAU;KAAO;IACtD,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1511, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useScrollToBottomOnNewMessage.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nexport const useScrollToBottomOnNewMessage = ({ messages, scrollToBottom, scrollToLatestMessageOnFocus, }) => {\n    const [newMessagesReceivedInBackground, setNewMessagesReceivedInBackground] = useState(false);\n    const scrollToBottomIfConfigured = useRef(undefined);\n    scrollToBottomIfConfigured.current = (event) => {\n        if (!scrollToLatestMessageOnFocus ||\n            !newMessagesReceivedInBackground ||\n            event.target !== window) {\n            return;\n        }\n        setTimeout(scrollToBottom, 100);\n    };\n    useEffect(() => {\n        setNewMessagesReceivedInBackground(true);\n    }, [messages]);\n    useEffect(() => {\n        const handleFocus = (event) => {\n            scrollToBottomIfConfigured.current?.(event);\n        };\n        const handleBlur = () => {\n            setNewMessagesReceivedInBackground(false);\n        };\n        if (typeof window !== 'undefined') {\n            window.addEventListener('focus', handleFocus);\n            window.addEventListener('blur', handleBlur);\n        }\n        return () => {\n            window.removeEventListener('focus', handleFocus);\n            window.removeEventListener('blur', handleBlur);\n        };\n    }, []);\n};\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gCAAgC,CAAC,EAAE,QAAQ,EAAE,cAAc,EAAE,4BAA4B,EAAG;IACrG,MAAM,CAAC,iCAAiC,mCAAmC,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvF,MAAM,6BAA6B,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAC1C,2BAA2B,OAAO,GAAG,CAAC;QAClC,IAAI,CAAC,gCACD,CAAC,mCACD,MAAM,MAAM,KAAK,QAAQ;YACzB;QACJ;QACA,WAAW,gBAAgB;IAC/B;IACA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mDAAE;YACN,mCAAmC;QACvC;kDAAG;QAAC;KAAS;IACb,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mDAAE;YACN,MAAM;uEAAc,CAAC;oBACjB,2BAA2B,OAAO,GAAG;gBACzC;;YACA,MAAM;sEAAa;oBACf,mCAAmC;gBACvC;;YACA,IAAI,OAAO,WAAW,aAAa;gBAC/B,OAAO,gBAAgB,CAAC,SAAS;gBACjC,OAAO,gBAAgB,CAAC,QAAQ;YACpC;YACA;2DAAO;oBACH,OAAO,mBAAmB,CAAC,SAAS;oBACpC,OAAO,mBAAmB,CAAC,QAAQ;gBACvC;;QACJ;kDAAG,EAAE;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1563, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useShouldForceScrollToBottom.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nexport function useShouldForceScrollToBottom(messages, currentUserId) {\n    const lastFocusedOwnMessage = useRef('');\n    const initialFocusRegistered = useRef(false);\n    function recheckForNewOwnMessage() {\n        if (messages && messages.length > 0) {\n            const lastMessage = messages[messages.length - 1];\n            if (lastMessage.user?.id === currentUserId &&\n                lastFocusedOwnMessage.current !== lastMessage.id) {\n                lastFocusedOwnMessage.current = lastMessage.id;\n                return true;\n            }\n        }\n        return false;\n    }\n    useEffect(() => {\n        if (messages && messages.length && !initialFocusRegistered.current) {\n            initialFocusRegistered.current = true;\n            recheckForNewOwnMessage();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [messages, messages?.length]);\n    return recheckForNewOwnMessage;\n}\n"],"names":[],"mappings":";;;AAAA;;AACO,SAAS,6BAA6B,QAAQ,EAAE,aAAa;IAChE,MAAM,wBAAwB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACrC,MAAM,yBAAyB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IACtC,SAAS;QACL,IAAI,YAAY,SAAS,MAAM,GAAG,GAAG;YACjC,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;YACjD,IAAI,YAAY,IAAI,EAAE,OAAO,iBACzB,sBAAsB,OAAO,KAAK,YAAY,EAAE,EAAE;gBAClD,sBAAsB,OAAO,GAAG,YAAY,EAAE;gBAC9C,OAAO;YACX;QACJ;QACA,OAAO;IACX;IACA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kDAAE;YACN,IAAI,YAAY,SAAS,MAAM,IAAI,CAAC,uBAAuB,OAAO,EAAE;gBAChE,uBAAuB,OAAO,GAAG;gBACjC;YACJ;QACA,uDAAuD;QAC3D;iDAAG;QAAC;QAAU,UAAU;KAAO;IAC/B,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1601, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/useUnreadMessagesNotificationVirtualized.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n/**\n * Controls the logic when an `UnreadMessagesNotification` component should be shown.\n * In virtualized message list there is no notion of being scrolled below or above `UnreadMessagesSeparator`.\n * Therefore, the `UnreadMessagesNotification` component is rendered based on timestamps.\n * If the there are unread messages in the channel and the `VirtualizedMessageList` renders\n * messages created later than the last read message in the channel, then the\n * `UnreadMessagesNotification` component is rendered. This is an approximate equivalent to being\n * scrolled below the `UnreadMessagesNotification` component.\n * @param lastRead\n * @param showAlways\n * @param unreadCount\n */\nexport const useUnreadMessagesNotificationVirtualized = ({ lastRead, showAlways, unreadCount, }) => {\n    const [show, setShow] = useState(false);\n    const toggleShowUnreadMessagesNotification = useCallback((renderedMessages) => {\n        if (!unreadCount)\n            return;\n        const firstRenderedMessage = renderedMessages[0];\n        const lastRenderedMessage = renderedMessages.slice(-1)[0];\n        if (!(firstRenderedMessage && lastRenderedMessage))\n            return;\n        const firstRenderedMessageTime = new Date(firstRenderedMessage.created_at ?? 0).getTime();\n        const lastRenderedMessageTime = new Date(lastRenderedMessage.created_at ?? 0).getTime();\n        const lastReadTime = new Date(lastRead ?? 0).getTime();\n        const scrolledBelowSeparator = !!lastReadTime && firstRenderedMessageTime > lastReadTime;\n        const scrolledAboveSeparator = !!lastReadTime && lastRenderedMessageTime < lastReadTime;\n        setShow(showAlways\n            ? scrolledBelowSeparator || scrolledAboveSeparator\n            : scrolledBelowSeparator);\n    }, [lastRead, showAlways, unreadCount]);\n    useEffect(() => {\n        if (!unreadCount)\n            setShow(false);\n    }, [unreadCount]);\n    return { show, toggleShowUnreadMessagesNotification };\n};\n"],"names":[],"mappings":";;;AAAA;;AAaO,MAAM,2CAA2C,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAG;IAC3F,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,uCAAuC,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;sGAAE,CAAC;YACtD,IAAI,CAAC,aACD;YACJ,MAAM,uBAAuB,gBAAgB,CAAC,EAAE;YAChD,MAAM,sBAAsB,iBAAiB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;YACzD,IAAI,CAAC,CAAC,wBAAwB,mBAAmB,GAC7C;YACJ,MAAM,2BAA2B,IAAI,KAAK,qBAAqB,UAAU,IAAI,GAAG,OAAO;YACvF,MAAM,0BAA0B,IAAI,KAAK,oBAAoB,UAAU,IAAI,GAAG,OAAO;YACrF,MAAM,eAAe,IAAI,KAAK,YAAY,GAAG,OAAO;YACpD,MAAM,yBAAyB,CAAC,CAAC,gBAAgB,2BAA2B;YAC5E,MAAM,yBAAyB,CAAC,CAAC,gBAAgB,0BAA0B;YAC3E,QAAQ,aACF,0BAA0B,yBAC1B;QACV;qGAAG;QAAC;QAAU;QAAY;KAAY;IACtC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8DAAE;YACN,IAAI,CAAC,aACD,QAAQ;QAChB;6DAAG;QAAC;KAAY;IAChB,OAAO;QAAE;QAAM;IAAqC;AACxD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1644, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageListComponents.js"],"sourcesContent":["import clsx from 'clsx';\nimport throttle from 'lodash.throttle';\nimport React from 'react';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { isMessageEdited, Message } from '../Message';\nimport { useComponentContext } from '../../context';\nimport { getIsFirstUnreadMessage, isDateSeparatorMessage, isIntroMessage } from './utils';\nconst PREPEND_OFFSET = 10 ** 7;\nexport function calculateItemIndex(virtuosoIndex, numItemsPrepended) {\n    return virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;\n}\nexport function calculateFirstItemIndex(numItemsPrepended) {\n    return PREPEND_OFFSET - numItemsPrepended;\n}\nexport const makeItemsRenderedHandler = (renderedItemsActions, processedMessages) => throttle((items) => {\n    const renderedMessages = items\n        .map((item) => {\n        if (!item.originalIndex)\n            return undefined;\n        return processedMessages[calculateItemIndex(item.originalIndex, PREPEND_OFFSET)];\n    })\n        .filter((msg) => !!msg);\n    renderedItemsActions.forEach((action) => action(renderedMessages));\n}, 200);\n// using 'display: inline-block'\n// traps CSS margins of the item elements, preventing incorrect item measurements\nexport const Item = ({ context, ...props }) => {\n    if (!context)\n        return React.createElement(React.Fragment, null);\n    const message = context.processedMessages[calculateItemIndex(props['data-item-index'], context.numItemsPrepended)];\n    const groupStyles = context.messageGroupStyles[message.id];\n    return (React.createElement(\"div\", { ...props, className: context?.customClasses?.virtualMessage ||\n            clsx('str-chat__virtual-list-message-wrapper str-chat__li', {\n                [`str-chat__li--${groupStyles}`]: groupStyles,\n            }) }));\n};\nexport const Header = ({ context }) => {\n    const { LoadingIndicator = DefaultLoadingIndicator } = useComponentContext('VirtualizedMessageListHeader');\n    return (React.createElement(React.Fragment, null,\n        context?.head,\n        context?.loadingMore && LoadingIndicator && (React.createElement(\"div\", { className: 'str-chat__virtual-list__loading' },\n            React.createElement(LoadingIndicator, { size: 20 })))));\n};\nexport const EmptyPlaceholder = ({ context }) => {\n    const { EmptyStateIndicator = DefaultEmptyStateIndicator } = useComponentContext('VirtualizedMessageList');\n    return (React.createElement(React.Fragment, null, EmptyStateIndicator && (React.createElement(EmptyStateIndicator, { listType: context?.threadList ? 'thread' : 'message' }))));\n};\nexport const messageRenderer = (virtuosoIndex, _data, virtuosoContext) => {\n    const { additionalMessageInputProps, closeReactionSelectorOnClick, customMessageActions, customMessageRenderer, DateSeparator, firstUnreadMessageId, formatDate, lastReadDate, lastReadMessageId, lastReceivedMessageId, Message: MessageUIComponent, messageActions, messageGroupStyles, MessageSystem, numItemsPrepended, openThread, ownMessagesReadByOthers, processedMessages: messageList, reactionDetailsSort, shouldGroupByUser, sortReactionDetails, sortReactions, threadList, unreadMessageCount = 0, UnreadMessagesSeparator, virtuosoRef, } = virtuosoContext;\n    const streamMessageIndex = calculateItemIndex(virtuosoIndex, numItemsPrepended);\n    if (customMessageRenderer) {\n        return customMessageRenderer(messageList, streamMessageIndex);\n    }\n    const message = messageList[streamMessageIndex];\n    if (!message || isIntroMessage(message))\n        return React.createElement(\"div\", { style: { height: '1px' } }); // returning null or zero height breaks the virtuoso\n    if (isDateSeparatorMessage(message)) {\n        return DateSeparator ? (React.createElement(DateSeparator, { date: message.date, unread: message.unread })) : null;\n    }\n    if (message.type === 'system') {\n        return MessageSystem ? React.createElement(MessageSystem, { message: message }) : null;\n    }\n    const maybePrevMessage = messageList[streamMessageIndex - 1];\n    const maybeNextMessage = messageList[streamMessageIndex + 1];\n    const groupedByUser = shouldGroupByUser &&\n        streamMessageIndex > 0 &&\n        message.user?.id === maybePrevMessage?.user?.id;\n    // FIXME: firstOfGroup & endOfGroup should be derived from groupStyles which apply a more complex logic\n    const firstOfGroup = shouldGroupByUser &&\n        (message.user?.id !== maybePrevMessage?.user?.id ||\n            (maybePrevMessage && isMessageEdited(maybePrevMessage)));\n    const endOfGroup = shouldGroupByUser &&\n        (message.user?.id !== maybeNextMessage?.user?.id || isMessageEdited(message));\n    const isFirstUnreadMessage = getIsFirstUnreadMessage({\n        firstUnreadMessageId,\n        isFirstMessage: streamMessageIndex === 0,\n        lastReadDate,\n        lastReadMessageId,\n        message,\n        previousMessage: streamMessageIndex ? messageList[streamMessageIndex - 1] : undefined,\n        unreadMessageCount,\n    });\n    return (React.createElement(React.Fragment, null,\n        isFirstUnreadMessage && (React.createElement(\"div\", { className: 'str-chat__unread-messages-separator-wrapper' },\n            React.createElement(UnreadMessagesSeparator, { unreadCount: unreadMessageCount }))),\n        React.createElement(Message, { additionalMessageInputProps: additionalMessageInputProps, autoscrollToBottom: virtuosoRef.current?.autoscrollToBottom, closeReactionSelectorOnClick: closeReactionSelectorOnClick, customMessageActions: customMessageActions, endOfGroup: endOfGroup, firstOfGroup: firstOfGroup, formatDate: formatDate, groupedByUser: groupedByUser, groupStyles: [messageGroupStyles[message.id] ?? ''], lastReceivedId: lastReceivedMessageId, message: message, Message: MessageUIComponent, messageActions: messageActions, openThread: openThread, reactionDetailsSort: reactionDetailsSort, readBy: ownMessagesReadByOthers[message.id] || [], sortReactionDetails: sortReactionDetails, sortReactions: sortReactions, threadList: threadList })));\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1781, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bruce%20Vo/Documents/project/Streaming_Platform/frontend/node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { Virtuoso } from 'react-virtuoso';\nimport { GiphyPreviewMessage as DefaultGiphyPreviewMessage } from './GiphyPreviewMessage';\nimport { useLastReadData } from './hooks';\nimport { useGiphyPreview, useMessageSetKey, useNewMessageNotification, usePrependedMessagesCount, useScrollToBottomOnNewMessage, useShouldForceScrollToBottom, useUnreadMessagesNotificationVirtualized, } from './hooks/VirtualizedMessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { getGroupStyles, getLastReceived, processMessages } from './utils';\nimport { MessageSimple } from '../Message';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { calculateFirstItemIndex, calculateItemIndex, EmptyPlaceholder, Header, Item, makeItemsRenderedHandler, messageRenderer, } from './VirtualizedMessageListComponents';\nimport { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from '../MessageList';\nimport { DateSeparator as DefaultDateSeparator } from '../DateSeparator';\nimport { EventComponent as DefaultMessageSystem } from '../EventComponent';\nimport { DialogManagerProvider } from '../../context';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { VirtualizedMessageListContextProvider } from '../../context/VirtualizedMessageListContext';\nimport { DEFAULT_NEXT_CHANNEL_PAGE_SIZE } from '../../constants/limits';\nimport { useStableId } from '../UtilityComponents/useStableId';\nfunction captureResizeObserverExceededError(e) {\n    if (e.message === 'ResizeObserver loop completed with undelivered notifications.' ||\n        e.message === 'ResizeObserver loop limit exceeded') {\n        e.stopImmediatePropagation();\n    }\n}\nfunction useCaptureResizeObserverExceededError() {\n    useEffect(() => {\n        window.addEventListener('error', captureResizeObserverExceededError);\n        return () => {\n            window.removeEventListener('error', captureResizeObserverExceededError);\n        };\n    }, []);\n}\nfunction fractionalItemSize(element) {\n    return element.getBoundingClientRect().height;\n}\nfunction findMessageIndex(messages, id) {\n    return messages.findIndex((message) => message.id === id);\n}\nfunction calculateInitialTopMostItemIndex(messages, highlightedMessageId) {\n    if (highlightedMessageId) {\n        const index = findMessageIndex(messages, highlightedMessageId);\n        if (index !== -1) {\n            return { align: 'center', index };\n        }\n    }\n    return messages.length - 1;\n}\nconst VirtualizedMessageListWithContext = (props) => {\n    const { additionalMessageInputProps, additionalVirtuosoProps = {}, channel, channelUnreadUiState, closeReactionSelectorOnClick, customMessageActions, customMessageRenderer, defaultItemHeight, disableDateSeparator = true, formatDate, groupStyles, hasMoreNewer, head, hideDeletedMessages = false, hideNewMessageSeparator = false, highlightedMessageId, jumpToLatestMessage, loadingMore, loadMore, loadMoreNewer, maxTimeBetweenGroupedMessages, Message: MessageUIComponentFromProps, messageActions, messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE, messages, notifications, openThread, \n    // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component\n    overscan = 0, reactionDetailsSort, read, returnAllReadData = false, reviewProcessedMessage, scrollSeekPlaceHolder, scrollToLatestMessageOnFocus = false, separateGiphyPreview = false, shouldGroupByUser = false, showUnreadNotificationAlways, sortReactionDetails, sortReactions, stickToBottomScrollBehavior = 'smooth', suppressAutoscroll, threadList, } = props;\n    const { components: virtuosoComponentsFromProps, ...overridingVirtuosoProps } = additionalVirtuosoProps;\n    // Stops errors generated from react-virtuoso to bubble up\n    // to Sentry or other tracking tools.\n    useCaptureResizeObserverExceededError();\n    const { DateSeparator = DefaultDateSeparator, GiphyPreviewMessage = DefaultGiphyPreviewMessage, MessageListMainPanel = DefaultMessageListMainPanel, MessageListNotifications = DefaultMessageListNotifications, MessageNotification = DefaultMessageNotification, MessageSystem = DefaultMessageSystem, TypingIndicator, UnreadMessagesNotification = DefaultUnreadMessagesNotification, UnreadMessagesSeparator = DefaultUnreadMessagesSeparator, VirtualMessage: MessageUIComponentFromContext = MessageSimple, } = useComponentContext('VirtualizedMessageList');\n    const MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;\n    const { client, customClasses } = useChatContext('VirtualizedMessageList');\n    const virtuoso = useRef(null);\n    const lastRead = useMemo(() => channel.lastRead?.(), [channel]);\n    const { show: showUnreadMessagesNotification, toggleShowUnreadMessagesNotification } = useUnreadMessagesNotificationVirtualized({\n        lastRead: channelUnreadUiState?.last_read,\n        showAlways: !!showUnreadNotificationAlways,\n        unreadCount: channelUnreadUiState?.unread_messages ?? 0,\n    });\n    const { giphyPreviewMessage, setGiphyPreviewMessage } = useGiphyPreview(separateGiphyPreview);\n    const processedMessages = useMemo(() => {\n        if (typeof messages === 'undefined') {\n            return [];\n        }\n        if (disableDateSeparator &&\n            !hideDeletedMessages &&\n            hideNewMessageSeparator &&\n            !separateGiphyPreview) {\n            return messages;\n        }\n        return processMessages({\n            enableDateSeparator: !disableDateSeparator,\n            hideDeletedMessages,\n            hideNewMessageSeparator,\n            lastRead,\n            messages,\n            reviewProcessedMessage,\n            setGiphyPreviewMessage,\n            userId: client.userID || '',\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        disableDateSeparator,\n        hideDeletedMessages,\n        hideNewMessageSeparator,\n        lastRead,\n        messages,\n        messages?.length,\n        client.userID,\n    ]);\n    // get the mapping of own messages to array of users who read them\n    const ownMessagesReadByOthers = useLastReadData({\n        messages: processedMessages,\n        read,\n        returnAllReadData,\n        userID: client.userID,\n    });\n    const lastReceivedMessageId = useMemo(() => getLastReceived(processedMessages), [processedMessages]);\n    const groupStylesFn = groupStyles || getGroupStyles;\n    const messageGroupStyles = useMemo(() => processedMessages.reduce((acc, message, i) => {\n        const style = groupStylesFn(message, processedMessages[i - 1], processedMessages[i + 1], !shouldGroupByUser, maxTimeBetweenGroupedMessages);\n        if (style && message.id)\n            acc[message.id] = style;\n        return acc;\n    }, {}), \n    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        maxTimeBetweenGroupedMessages,\n        processedMessages.length,\n        shouldGroupByUser,\n        groupStylesFn,\n    ]);\n    const { atBottom, isMessageListScrolledToBottom, newMessagesNotification, setIsMessageListScrolledToBottom, setNewMessagesNotification, } = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer);\n    useMarkRead({\n        isMessageListScrolledToBottom,\n        messageListIsThread: !!threadList,\n        wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id,\n    });\n    const scrollToBottom = useCallback(async () => {\n        if (hasMoreNewer) {\n            await jumpToLatestMessage();\n            return;\n        }\n        if (virtuoso.current) {\n            virtuoso.current.scrollToIndex(processedMessages.length - 1);\n        }\n        setNewMessagesNotification(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        virtuoso,\n        processedMessages,\n        setNewMessagesNotification,\n        // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n        processedMessages.length,\n        hasMoreNewer,\n        jumpToLatestMessage,\n    ]);\n    useScrollToBottomOnNewMessage({\n        messages,\n        scrollToBottom,\n        scrollToLatestMessageOnFocus,\n    });\n    const numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);\n    const { messageSetKey } = useMessageSetKey({ messages });\n    const shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);\n    const handleItemsRendered = useMemo(() => makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages), [processedMessages, toggleShowUnreadMessagesNotification]);\n    const followOutput = (isAtBottom) => {\n        if (hasMoreNewer || suppressAutoscroll) {\n            return false;\n        }\n        if (shouldForceScrollToBottom()) {\n            return isAtBottom ? stickToBottomScrollBehavior : 'auto';\n        }\n        // a message from another user has been received - don't scroll to bottom unless already there\n        return isAtBottom ? stickToBottomScrollBehavior : false;\n    };\n    const computeItemKey = useCallback((index, _, { numItemsPrepended, processedMessages }) => processedMessages[calculateItemIndex(index, numItemsPrepended)].id, []);\n    const atBottomStateChange = (isAtBottom) => {\n        atBottom.current = isAtBottom;\n        setIsMessageListScrolledToBottom(isAtBottom);\n        if (isAtBottom) {\n            loadMoreNewer?.(messageLimit);\n            setNewMessagesNotification?.(false);\n        }\n    };\n    const atTopStateChange = (isAtTop) => {\n        if (isAtTop) {\n            loadMore?.(messageLimit);\n        }\n    };\n    useEffect(() => {\n        let scrollTimeout;\n        if (highlightedMessageId) {\n            const index = findMessageIndex(processedMessages, highlightedMessageId);\n            if (index !== -1) {\n                scrollTimeout = setTimeout(() => {\n                    virtuoso.current?.scrollToIndex({ align: 'center', index });\n                }, 0);\n            }\n        }\n        return () => {\n            clearTimeout(scrollTimeout);\n        };\n    }, [highlightedMessageId, processedMessages]);\n    const id = useStableId();\n    if (!processedMessages)\n        return null;\n    const dialogManagerId = threadList\n        ? `virtualized-message-list-dialog-manager-thread-${id}`\n        : `virtualized-message-list-dialog-manager-${id}`;\n    return (React.createElement(VirtualizedMessageListContextProvider, { value: { scrollToBottom } },\n        React.createElement(MessageListMainPanel, null,\n            React.createElement(DialogManagerProvider, { id: dialogManagerId },\n                !threadList && showUnreadMessagesNotification && (React.createElement(UnreadMessagesNotification, { unreadCount: channelUnreadUiState?.unread_messages })),\n                React.createElement(\"div\", { className: customClasses?.virtualizedMessageList || 'str-chat__virtual-list' },\n                    React.createElement(Virtuoso, { atBottomStateChange: atBottomStateChange, atBottomThreshold: 100, atTopStateChange: atTopStateChange, atTopThreshold: 100, className: 'str-chat__message-list-scroll', components: {\n                            EmptyPlaceholder,\n                            Header,\n                            Item,\n                            ...virtuosoComponentsFromProps,\n                        }, computeItemKey: computeItemKey, context: {\n                            additionalMessageInputProps,\n                            closeReactionSelectorOnClick,\n                            customClasses,\n                            customMessageActions,\n                            customMessageRenderer,\n                            DateSeparator,\n                            firstUnreadMessageId: channelUnreadUiState?.first_unread_message_id,\n                            formatDate,\n                            head,\n                            lastReadDate: channelUnreadUiState?.last_read,\n                            lastReadMessageId: channelUnreadUiState?.last_read_message_id,\n                            lastReceivedMessageId,\n                            loadingMore,\n                            Message: MessageUIComponent,\n                            messageActions,\n                            messageGroupStyles,\n                            MessageSystem,\n                            numItemsPrepended,\n                            openThread,\n                            ownMessagesReadByOthers,\n                            processedMessages,\n                            reactionDetailsSort,\n                            shouldGroupByUser,\n                            sortReactionDetails,\n                            sortReactions,\n                            threadList,\n                            unreadMessageCount: channelUnreadUiState?.unread_messages,\n                            UnreadMessagesSeparator,\n                            virtuosoRef: virtuoso,\n                        }, firstItemIndex: calculateFirstItemIndex(numItemsPrepended), followOutput: followOutput, increaseViewportBy: { bottom: 200, top: 0 }, initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId), itemContent: messageRenderer, itemSize: fractionalItemSize, itemsRendered: handleItemsRendered, key: messageSetKey, overscan: overscan, ref: virtuoso, style: { overflowX: 'hidden' }, totalCount: processedMessages.length, ...overridingVirtuosoProps, ...(scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {}), ...(defaultItemHeight ? { defaultItemHeight } : {}) }))),\n            TypingIndicator && React.createElement(TypingIndicator, null)),\n        React.createElement(MessageListNotifications, { hasNewMessages: newMessagesNotification, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification, notifications: notifications, scrollToBottom: scrollToBottom, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages }),\n        giphyPreviewMessage && React.createElement(GiphyPreviewMessage, { message: giphyPreviewMessage })));\n};\n/**\n * The VirtualizedMessageList component renders a list of messages in a virtualized list.\n * It is a consumer of the React contexts set in [Channel](https://github.com/GetStream/stream-chat-react/blob/master/src/components/Channel/Channel.tsx).\n */\nexport function VirtualizedMessageList(props) {\n    const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext('VirtualizedMessageList');\n    const { channel, channelUnreadUiState, hasMore, hasMoreNewer, highlightedMessageId, loadingMore, loadingMoreNewer, messages: contextMessages, notifications, read, suppressAutoscroll, } = useChannelStateContext('VirtualizedMessageList');\n    const messages = props.messages || contextMessages;\n    return (React.createElement(VirtualizedMessageListWithContext, { channel: channel, channelUnreadUiState: props.channelUnreadUiState ?? channelUnreadUiState, hasMore: !!hasMore, hasMoreNewer: !!hasMoreNewer, highlightedMessageId: highlightedMessageId, jumpToLatestMessage: jumpToLatestMessage, loadingMore: !!loadingMore, loadingMoreNewer: !!loadingMoreNewer, loadMore: loadMore, loadMoreNewer: loadMoreNewer, messages: messages, notifications: notifications, read: read, suppressAutoscroll: suppressAutoscroll, ...props }));\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}